<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JohnsHope.FPlot.Library</name>
    </assembly>
    <members>
        <member name="T:JohnsHope.Analysis.IFunction1D">
            <summary>
            Represents a one dimensional function.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.IFunction1D.f(System.Double)">
            <summary>
            A one dimensional function.
            </summary>
        </member>
        <member name="T:JohnsHope.Analysis.IFunction2D">
            <summary>
            Represents a two dimensional function.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.IFunction2D.f(System.Double,System.Double)">
            <summary>
            A two dimensional function.
            </summary>
        </member>
        <member name="T:JohnsHope.Analysis.IParametricFunction">
            <summary>
            Represents a function that depends on parameters.
            </summary>
        </member>
        <member name="P:JohnsHope.Analysis.IParametricFunction.Parameters">
            <summary>
            The parameters of the function.
            </summary>
        </member>
        <member name="T:JohnsHope.Analysis.IParametricFunction1D">
            <summary>
            A one dimensional function that depends on parameters.
            </summary>
        </member>
        <member name="T:JohnsHope.Analysis.IParametricFunction2D">
            <summary>
            A two dimensional function that depends on parameters.
            </summary>
        </member>
        <member name="T:JohnsHope.Analysis.Function1DDelegate">
            <summary>
            A delegate that represents a double 1D function.
            </summary>
            <param name="x">The parameter of the function.</param>
        </member>
        <member name="T:JohnsHope.Analysis.Function2DDelegate">
            <summary>
            A delegate that represents a double 2D function.
            </summary>
            <param name="x">The x parameter of the function.</param>
            <param name="y">The x parameter of the function.</param>
        </member>
        <member name="T:JohnsHope.Analysis.ParametricFunction1DDelegate">
            <summary>
            A delegate that represents a double 1D function that depends on parameters.
            </summary>
            <param name="x">The x parameter of the function.</param>
            <param name="p">The parameters.</param>
            <returns></returns>
        </member>
        <member name="T:JohnsHope.Analysis.ParametricFunction2DDelegate">
            <summary>
            A delegate that represents a double 2D function that depends on parameters.
            </summary>
            <param name="x">The x parameter of the function.</param>
            <param name="y">The y parameter of the function.</param>
            <param name="p">Teh parameters.</param>
            <returns></returns>
        </member>
        <member name="T:JohnsHope.Analysis.Diff">
            <summary>
            A class to differentiate functions.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.dfdx(JohnsHope.Analysis.IFunction1D,System.Double,System.Double@)">
            <summary>
            Differentiation of a one dimensional function.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.dfdx(JohnsHope.Analysis.Function1DDelegate,System.Double,System.Double@)">
            <summary>
            Differentiation of a one dimensional function.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.diff(JohnsHope.Analysis.IFunction1D,System.Double,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.Analysis.Diff.dfdx(JohnsHope.Analysis.IFunction1D,System.Double,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.diff(JohnsHope.Analysis.Function1DDelegate,System.Double,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.Analysis.Diff.dfdx(JohnsHope.Analysis.IFunction1D,System.Double,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.dfdx(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)">
            <summary>
            Differentiation of a two dimensional function df/dx.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.dfdx(JohnsHope.Analysis.Function2DDelegate,System.Double,System.Double,System.Double@)">
            <summary>
            Differentiation of a two dimensional function df/dx.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.dfdy(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)">
            <summary>
            Differentiation of a two dimensional function df/dy.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.dfdy(JohnsHope.Analysis.Function2DDelegate,System.Double,System.Double,System.Double@)">
            <summary>
            Differentiation of a two dimensional function df/dy.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.diffx(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.Analysis.Diff.dfdx(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.diffy(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.Analysis.Diff.dfdy(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.diffx(JohnsHope.Analysis.Function2DDelegate,System.Double,System.Double,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.Analysis.Diff.dfdx(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.diffy(JohnsHope.Analysis.Function2DDelegate,System.Double,System.Double,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.Analysis.Diff.dfdy(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.dfdp(JohnsHope.Analysis.IParametricFunction1D,System.Double,System.Int32,System.Double@)">
            <summary>
            Differentiation of a one dimensional function after <c>f.Parameters[n]</c>.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.diffp(JohnsHope.Analysis.IParametricFunction1D,System.Double,System.Int32,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.Analysis.Diff.dfdp(JohnsHope.Analysis.IParametricFunction1D,System.Double,System.Int32,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.dfdp(JohnsHope.Analysis.IParametricFunction2D,System.Double,System.Double,System.Int32,System.Double@)">
            <summary>
            Differentiation of a one dimensional function after <c>f.Parameters[n]</c>.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.diffp(JohnsHope.Analysis.IParametricFunction2D,System.Double,System.Double,System.Int32,System.Double@)">
            <summary>
            An alias for the routine dfdp.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.dfdp(JohnsHope.Analysis.ParametricFunction1DDelegate,System.Double,System.Collections.Generic.IList{System.Double},System.Int32,System.Double@)">
            <summary>
            Differentiation of a one dimensional function after <c>f.Parameters[n]</c>.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.diffp(JohnsHope.Analysis.ParametricFunction1DDelegate,System.Double,System.Collections.Generic.IList{System.Double},System.Int32,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.Analysis.Diff.dfdp(JohnsHope.Analysis.IParametricFunction1D,System.Double,System.Int32,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.dfdp(JohnsHope.Analysis.ParametricFunction2DDelegate,System.Double,System.Double,System.Collections.Generic.IList{System.Double},System.Int32,System.Double@)">
            <summary>
            Differentiation of a one dimensional function after <c>f.Parameters[n]</c>.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Diff.diffp(JohnsHope.Analysis.ParametricFunction2DDelegate,System.Double,System.Double,System.Collections.Generic.IList{System.Double},System.Int32,System.Double@)">
            <summary>
            An alias for the routine dfdp.
            </summary>
        </member>
        <member name="T:JohnsHope.Analysis.Int">
            <summary>
            A class used to integrate functions.
            </summary>
        </member>
        <member name="F:JohnsHope.Analysis.Int.ThrowOnErrors">
            <summary>
            If set to true, the routines will throw an Exception upon a error.
            </summary>
        </member>
        <member name="M:JohnsHope.Analysis.Int.q(JohnsHope.Analysis.IFunction1D,System.Double,System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Integration of a smooth one dimensional function. The integral is computed until the error is below either <c>epsabs</c>
            or <c>epsrel</c>. The algorithm is provided for fast integration of smooth functions.
            </summary>
            <param name="f">The function to integrate</param>
            <param name="a">The lower integration bound</param>
            <param name="b">The upper integration bound</param>
            <param name="epsabs">The desired absolute error</param>
            <param name="epsrel">The desired relative error</param>
            <param name="abserr">The estimated error of the result</param>
            <returns>The integral of the function</returns>
        </member>
        <member name="M:JohnsHope.Analysis.Int.q(JohnsHope.Analysis.Function1DDelegate,System.Double,System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Integration of a smooth one dimensional function. The integral is computed until the error is below either <c>epsabs</c>
            or <c>epsrel</c>. The algorithm is provided for fast integration of smooth functions.
            </summary>
            <param name="f">The function to integrate</param>
            <param name="a">The lower integration bound</param>
            <param name="b">The upper integration bound</param>
            <param name="epsabs">The desired absolute error</param>
            <param name="epsrel">The desired relative error</param>
            <param name="abserr">The estimated error of the result</param>
            <returns>The integral of the function</returns>
        </member>
        <member name="M:JohnsHope.Analysis.Int.qa(JohnsHope.Analysis.IFunction1D,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Single,System.Double@)">
            <summary>
            Integration of the function f with adaptive stepsize. The integration region is divided into subintervals,
            and on each iteration the subinterval with the largest estimated error is bisected. This reduces the overall error
            rapidly, as the subintervals become concentrated around local difficulties in the integrand. The function allocates static
            memory for the used workspace accoring to the parameter memlimit.  
            This function applies an integration rule adaptively until an estimate of the integral of f over (a,b) is achieved within
            the desired absolute and relative error limits, epsabs and epsrel. The integration rule is determined by the value of smoothness,
            which should be chosen between 1 for smooth functions and 0 for functions that contain local difficulties, such as discontinuities.
            </summary>
            <param name="f">The function to integrate</param>
            <param name="a">The lower bound of the integration</param>
            <param name="b">The upper bound of the integration</param>
            <param name="epsabs">The desired absolute error</param>
            <param name="epsrel">The desired relative error</param>
            <param name="memlimit">The maximum memory consumption of the routine, in bytes</param>
            <param name="smoothness">The smoothness of the funtion. 1 indicates a smooth function and 0 indicates a function with local
            difficulties.</param>
            <param name="abserr">The absolute error of the integral</param>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.Analysis.Int.qa(JohnsHope.Analysis.Function1DDelegate,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Single,System.Double@)">
            <summary>
            Integration of the function f with adaptive stepsize. The integration region is divided into subintervals,
            and on each iteration the subinterval with the largest estimated error is bisected. This reduces the overall error
            rapidly, as the subintervals become concentrated around local difficulties in the integrand. The function allocates static
            memory for the used workspace accoring to the parameter memlimit.  
            This function applies an integration rule adaptively until an estimate of the integral of f over (a,b) is achieved within
            the desired absolute and relative error limits, epsabs and epsrel. The integration rule is determined by the value of smoothness,
            which should be chosen between 1 for smooth functions and 0 for functions that contain local difficulties, such as discontinuities.
            </summary>
            <param name="f">The function to integrate</param>
            <param name="a">The lower bound of the integration</param>
            <param name="b">The upper bound of the integration</param>
            <param name="epsabs">The desired absolute error</param>
            <param name="epsrel">The desired relative error</param>
            <param name="memlimit">The maximum memory consumption of the routine, in bytes</param>
            <param name="smoothness">The smoothness of the funtion. 1 indicates a smooth function and 0 indicates a function with local
            difficulties.</param>
            <param name="abserr">The absolute error of the integral</param>
            <returns></returns>
        </member>
        <member name="T:JohnsHope.FPlot.Library.DefaultClass">
            <summary>
            A default class with predefined function shortcuts. All <see cref="T:JohnsHope.FPlot.Library.Item">Items</see> derive from DefaultClass, so it's methods
            can be called from within the it's source. 
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.DefaultClass.IFunction1D">
            <summary>
            A one dimensional function.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.DefaultClass.IFunction2D">
            <summary>
            A two dimensional function.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DefaultClass.Items">
            <summary>
            This variable represents a global static <see cref="T:JohnsHope.FPlot.Library.Item"/> repository.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.Function1D(System.String)">
            <summary>
            Returns a delegate to a 1D function according to its name from a <see cref="F:JohnsHope.FPlot.Library.DefaultClass.Items">global Item repository</see>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.Function2D(System.String)">
            <summary>
            Returns a delegate to a 2D function according to its name from a <see cref="F:JohnsHope.FPlot.Library.DefaultClass.Items">global Item repository</see>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.diff(JohnsHope.Analysis.IFunction1D,System.Double,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.FPlot.Library.DefaultClass.dfdx(JohnsHope.Analysis.IFunction1D,System.Double,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.dfdx(JohnsHope.Analysis.IFunction1D,System.Double,System.Double@)">
            <summary>
            Returns df/dx for a one dimensional function <c>f</c>. This routine is an alias for
            <see cref="M:JohnsHope.Analysis.Diff.dfdx(JohnsHope.Analysis.IFunction1D,System.Double,System.Double@)"/>.
            </summary>
            <param name="f">The function</param>
            <param name="x">The x coordinate</param>
            <param name="abserr">The absolute error of the derivative</param>
            <returns>The value of the derivative of f at x</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.diffp(JohnsHope.Analysis.IParametricFunction1D,System.Double,System.Int32,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.FPlot.Library.DefaultClass.dfdp(JohnsHope.Analysis.IParametricFunction1D,System.Double,System.Int32,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.dfdp(JohnsHope.Analysis.IParametricFunction1D,System.Double,System.Int32,System.Double@)">
            <summary>
            Returns df/dp for a one dimensional parametric function <c>f</c>. This routine corresponds to
            <see cref="M:JohnsHope.Analysis.Diff.dfdp(JohnsHope.Analysis.IParametricFunction1D,System.Double,System.Int32,System.Double@)"/>.
            </summary>
            <param name="f">The function</param>
            <param name="x">The x coordinate</param>
            <param name="n">The index of the parameter to derive for</param>
            <param name="abserr">The absolute error of the derivative</param>
            <returns>The value of the derivative of f at x</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.dfdx(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)">
            <summary>
            Returns df/dx for a two dimensional function <c>f</c>. This routine corresponds to
            <see cref="M:JohnsHope.Analysis.Diff.dfdx(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)"/>.
            </summary>
            <param name="f">The function</param>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="abserr">The absolute error of the derivative</param>
            <returns>The value of the derivative of df/dx at (x, y)</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.dfdy(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)">
            <summary>
            Returns df/dy for a two dimensional function <c>f</c>. This routine corresponds to
            <see cref="M:JohnsHope.Analysis.Diff.dfdy(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)"/>.
            </summary>
            <param name="f">The function</param>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="abserr">The absolute error of the derivative</param>
            <returns>The value of the derivative of df/dy at (x, y)</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.dfdp(JohnsHope.Analysis.IParametricFunction2D,System.Double,System.Double,System.Int32,System.Double@)">
            <summary>
            Returns df/dp for a one dimensional parametric function <c>f</c>. This routine corresponds to
            <see cref="M:JohnsHope.Analysis.Diff.dfdp(JohnsHope.Analysis.IParametricFunction2D,System.Double,System.Double,System.Int32,System.Double@)"/>.
            </summary>
            <param name="f">The function</param>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="n">The index of the parameter to derive for</param>
            <param name="abserr">The absolute error of the derivative</param>
            <returns>The value of the derivative of <c>f</c> at <c>x</c></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.diffp(JohnsHope.Analysis.IParametricFunction2D,System.Double,System.Double,System.Int32,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.FPlot.Library.DefaultClass.dfdp(JohnsHope.Analysis.IParametricFunction2D,System.Double,System.Double,System.Int32,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.diffx(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.FPlot.Library.DefaultClass.dfdx(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.diffy(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.FPlot.Library.DefaultClass.dfdy(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.intq(JohnsHope.Analysis.IFunction1D,System.Double,System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Returns the integral of a one dimensional function <c>f</c>. The integral is computed until the error is below either
            <c>epsabs</c> or <c>epsrel</c>. This routine corresponds to
            <see cref="M:JohnsHope.Analysis.Int.q(JohnsHope.Analysis.IFunction1D,System.Double,System.Double,System.Double,System.Double,System.Double@)"/>.
            the Gnu Scientific Library.
            </summary>
            <param name="f">The function to integrate.</param>
            <param name="a">The lower bound of the integral</param>
            <param name="b">The upper bound of the integral</param>
            <param name="epsabs">The required absoulte error</param>
            <param name="epsrel">The required relative error</param>
            <param name="abserr">The absolute error of the computed integral</param>
            <returns>The computed value of the integral</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.intqa(JohnsHope.Analysis.IFunction1D,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Single,System.Double@)">
            <summary>
            Retruns the integral of a one dimensional function <c>f</c>. The integral is computed until the error is below either
            <c>epsabs</c>
            or <c>epsrel</c>. This routine corresponds to
            <see cref="M:JohnsHope.Analysis.Int.qa(JohnsHope.Analysis.IFunction1D,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Single,System.Double@)"/>.
            </summary>
            <param name="f">The function to integrate</param>
            <param name="a">The lower bound of the integral</param>
            <param name="b">The upper bound of the integral</param>
            <param name="epsabs">The required absolute error</param>
            <param name="epsrel">The required relative error</param>
            <param name="memlimit">The maximum amount of memory used, in bytes</param>
            <param name="smoothness">The smoothness of the funtion, 1 meaning a maximal smooth function and 0 meaning a function
            with maximun local difficulties</param>
            <param name="abserr">The absolute error of the computed integral</param>
            <returns>The computed value of the integral</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.diff(JohnsHope.Analysis.Function1DDelegate,System.Double,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.FPlot.Library.DefaultClass.dfdx(JohnsHope.Analysis.Function1DDelegate,System.Double,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.dfdx(JohnsHope.Analysis.Function1DDelegate,System.Double,System.Double@)">
            <summary>
            Returns df/dx for a one dimensional function <c>f</c>. This routine is an alias for
            <see cref="M:JohnsHope.Analysis.Diff.dfdx(JohnsHope.Analysis.Function1DDelegate,System.Double,System.Double@)"/>.
            </summary>
            <param name="f">The function</param>
            <param name="x">The x coordinate</param>
            <param name="abserr">The absolute error of the derivative</param>
            <returns>The value of the derivative of f at x</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.diffp(JohnsHope.Analysis.ParametricFunction1DDelegate,System.Double,System.Collections.Generic.IList{System.Double},System.Int32,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.FPlot.Library.DefaultClass.dfdp(JohnsHope.Analysis.IParametricFunction1D,System.Double,System.Int32,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.dfdp(JohnsHope.Analysis.ParametricFunction1DDelegate,System.Double,System.Collections.Generic.IList{System.Double},System.Int32,System.Double@)">
            <summary>
            Returns df/dp for a one dimensional parametric function <c>f</c>. This routine corresponds to
            <see cref="M:JohnsHope.Analysis.Diff.dfdp(JohnsHope.Analysis.IParametricFunction1D,System.Double,System.Int32,System.Double@)"/>.
            </summary>
            <param name="f">The function</param>
            <param name="x">The x coordinate</param>
            <param name="p">The parametrs of the function f</param>
            <param name="n">The index of the parameter to derive for</param>
            <param name="abserr">The absolute error of the derivative</param>
            <returns>The value of the derivative of f at x</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.dfdx(JohnsHope.Analysis.Function2DDelegate,System.Double,System.Double,System.Double@)">
            <summary>
            Returns df/dx for a two dimensional function <c>f</c>. This routine corresponds to
            <see cref="M:JohnsHope.Analysis.Diff.dfdx(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)"/>.
            </summary>
            <param name="f">The function</param>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="abserr">The absolute error of the derivative</param>
            <returns>The value of the derivative of df/dx at (x, y)</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.dfdy(JohnsHope.Analysis.Function2DDelegate,System.Double,System.Double,System.Double@)">
            <summary>
            Returns df/dy for a two dimensional function <c>f</c>. This routine corresponds to
            <see cref="M:JohnsHope.Analysis.Diff.dfdy(JohnsHope.Analysis.Function2DDelegate,System.Double,System.Double,System.Double@)"/>.
            </summary>
            <param name="f">The function</param>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="abserr">The absolute error of the derivative</param>
            <returns>The value of the derivative of df/dy at (x, y)</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.dfdp(JohnsHope.Analysis.ParametricFunction2DDelegate,System.Double,System.Double,System.Collections.Generic.IList{System.Double},System.Int32,System.Double@)">
            <summary>
            Returns df/dp for a one dimensional parametric function <c>f</c>. This routine corresponds to
            <see cref="M:JohnsHope.Analysis.Diff.dfdp(JohnsHope.Analysis.IParametricFunction2D,System.Double,System.Double,System.Int32,System.Double@)"/>.
            </summary>
            <param name="f">The function</param>
            <param name="x">The x coordinate</param>
            <param name="y">The y coordinate</param>
            <param name="p">The parametrs of the function f</param>
            <param name="n">The index of the parameter to derive for</param>
            <param name="abserr">The absolute error of the derivative</param>
            <returns>The value of the derivative of <c>f</c> at <c>x</c></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.diffp(JohnsHope.Analysis.ParametricFunction2DDelegate,System.Double,System.Double,System.Collections.Generic.IList{System.Double},System.Int32,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.FPlot.Library.DefaultClass.dfdp(JohnsHope.Analysis.IParametricFunction2D,System.Double,System.Double,System.Int32,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.diffx(JohnsHope.Analysis.Function2DDelegate,System.Double,System.Double,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.FPlot.Library.DefaultClass.dfdx(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.diffy(JohnsHope.Analysis.Function2DDelegate,System.Double,System.Double,System.Double@)">
            <summary>
            An alias for the routine <see cref="M:JohnsHope.FPlot.Library.DefaultClass.dfdy(JohnsHope.Analysis.IFunction2D,System.Double,System.Double,System.Double@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.intq(JohnsHope.Analysis.Function1DDelegate,System.Double,System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Returns the integral of a one dimensional function <c>f</c>. The integral is computed until the error is below either
            <c>epsabs</c> or <c>epsrel</c>. This routine corresponds to
            <see cref="M:JohnsHope.Analysis.Int.q(JohnsHope.Analysis.Function1DDelegate,System.Double,System.Double,System.Double,System.Double,System.Double@)"/>.
            the Gnu Scientific Library.
            </summary>
            <param name="f">The function to integrate.</param>
            <param name="a">The lower bound of the integral</param>
            <param name="b">The upper bound of the integral</param>
            <param name="epsabs">The required absoulte error</param>
            <param name="epsrel">The required relative error</param>
            <param name="abserr">The absolute error of the computed integral</param>
            <returns>The computed value of the integral</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.intqa(JohnsHope.Analysis.Function1DDelegate,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Single,System.Double@)">
            <summary>
            Retruns the integral of a one dimensional function <c>f</c>. The integral is computed until the error is below either
            <c>epsabs</c>
            or <c>epsrel</c>. This routine corresponds to
            <see cref="M:JohnsHope.Analysis.Int.qa(JohnsHope.Analysis.Function1DDelegate,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Single,System.Double@)"/>.
            </summary>
            <param name="f">The function to integrate</param>
            <param name="a">The lower bound of the integral</param>
            <param name="b">The upper bound of the integral</param>
            <param name="epsabs">The required absolute error</param>
            <param name="epsrel">The required relative error</param>
            <param name="memlimit">The maximum amount of memory used, in bytes</param>
            <param name="smoothness">The smoothness of the funtion, 1 meaning a maximal smooth function and 0 meaning a function
            with maximun local difficulties</param>
            <param name="abserr">The absolute error of the computed integral</param>
            <returns>The computed value of the integral</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.abs(System.Double)">
            <summary>
            A shortcut for Math.Abs.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.abs(System.Int32)">
            <summary>
            A shortcut for Math.Abs.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.acos(System.Double)">
            <summary>
            A shortcut for Math.Acos.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.asin(System.Double)">
            <summary>
            A shortcut for Math.Asin.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.atan(System.Double)">
            <summary>
            A shortcut for Math.Atan.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.ceiling(System.Double)">
            <summary>
            A shortcut for Math.Ceiling.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.cos(System.Double)">
            <summary>
            A shortcut for Math.Cos.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.cosh(System.Double)">
            <summary>
            A shortcut for Math.Cosh.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.exp(System.Double)">
            <summary>
            A shortcut for Math.Exp.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.floor(System.Double)">
            <summary>
            A shortcut for Math.Floor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.log(System.Double)">
            <summary>
            A shortcut for Math.Log.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.ln(System.Double)">
            <summary>
            A shortcut for Math.Log.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.log10(System.Double)">
            <summary>
            A shortcut for Math.Log10.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.max(System.Double,System.Double)">
            <summary>
            A shortcut for Math.Max.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.min(System.Double,System.Double)">
            <summary>
            A shortcut for Math.Min.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.max(System.Int32,System.Int32)">
            <summary>
            A shortcut for Math.Max.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.min(System.Int32,System.Int32)">
            <summary>
            A shortcut for Math.Min.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.pow(System.Double,System.Double)">
            <summary>
            A shortcut for Math.Pow.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.sin(System.Double)">
            <summary>
            A shortcut for Math.Sin.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.sinh(System.Double)">
            <summary>
            A shortcut for Math.Sinh.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.sqrt(System.Double)">
            <summary>
            A shortcut for Math.Sqrt.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.tan(System.Double)">
            <summary>
            A shortcut for Math.Tan.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DefaultClass.tanh(System.Double)">
            <summary>
            A shortcut for Math.Tanh.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DefaultClass.pi">
            <summary>
            A shortcut for Math.PI.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DefaultClass.e">
            <summary>
            A shortcut for Math.E.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Binary">
            <summary>
            A class that implements reading of numbers from binary Streams.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Binary.Enumerator">
            <summary>
            A class that implements a <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;double&gt;</see> that reads from a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Enumerator.#ctor(System.IO.Stream,System.Int64,System.Type,System.Boolean)">
            <summary>
            Constructor that initializes a Binary.Enumerator on a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="length">The maximum number of bytes to read.</param>
            <param name="type">The binary number data type.</param>
            <param name="bigEndian">If true, numbers are stored in big endian format in the <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Enumerator.#ctor(System.IO.Stream,System.Type,System.Boolean)">
            <summary>
            Constructor that initializes a Binray.Enumerator on a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The Stream to read from.</param>
            <param name="type">The binary number data type.</param>
            <param name="bigEndian">If true, numbers are stored in big endian format in the stream.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Enumerator.#ctor(System.IO.Stream,System.Int64,System.Type)">
            <summary>
            Constructor that initializes a Binary.Enumerator on a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The Stream to read from.</param>
            <param name="length">The maximum number of bytes to read.</param>
            <param name="type">The binary number data type.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Enumerator.#ctor(System.IO.Stream,System.Type)">
            <summary>
            Constructor that initializes a Binary.Enumerator on a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The Stream to read from.</param>
            <param name="type">The binary number data type.</param>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Binary.Enumerator.Current">
            <summary>
            Returns the current double value.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Enumerator.Dispose">
            <summary>
            Disposes the enumerator.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Enumerator.MoveNext">
            <summary>
            Moves to the next value as with IEnumerator&lt;double&gt; and returns true if there is a value available.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Enumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Binary.DataReader">
            <summary>
            A <see cref="T:JohnsHope.FPlot.Library.Binary.DataReader"/> class that implements reading from a <see cref="T:System.IO.Stream"/> of binary number values.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.DataReader.#ctor(System.IO.Stream,System.Int64,System.Type,System.Boolean)">
            <summary>
            A constructor.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="length">The maximum number of bytes to read.</param>
            <param name="type">The number type.</param>
            <param name="bigEndian">Set to true if the numbers are stored in big endian format in the <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.DataReader.#ctor(System.IO.Stream,System.Int64,System.Type)">
            <summary>
            A constructor.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="length">The maximum number of bytes to read.</param>
            <param name="type">The number type.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.DataReader.#ctor(System.IO.Stream,System.Type,System.Boolean)">
            <summary>
            A constructor.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="type">The number type.</param>
            <param name="bigEndian">Set to true if the numbers are stored in big endian format in the <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.DataReader.#ctor(System.IO.Stream,System.Type)">
            <summary>
            A constructor.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="type">The number type.</param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Binary.Loader">
            <summary>
            A <see cref="T:JohnsHope.FPlot.Library.DataItem.Instance"/> class that implements fast loading of text data. This class is used internally
            by the method <see cref="M:JohnsHope.FPlot.Library.DataItem.LoadBinary(System.String,System.Type)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Loader.#ctor(System.Type)">
            <summary>
            A constructor.
            </summary>
            <param name="type">The binary number type of the numbers in the underlying <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Loader.#ctor(System.Type,System.Boolean)">
            <summary>
            A constructor.
            </summary>
            <param name="type">The binary number type of the numbers in the underlying <see cref="T:System.IO.Stream"/>.</param>
            <param name="bigEndian">If true, the numbers will be read in big endian format.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Loader.#ctor(System.Type,System.Int64,System.Boolean)">
            <summary>
            A constructor.
            </summary>
            <param name="type">The binary number type of the numbers in the underlying <see cref="T:System.IO.Stream"/>.</param>
            <param name="length">The maximum number of bytes to read.</param>
            <param name="bigEndian">If true, the numbers will be read in big endian format.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Loader.#ctor(System.Type,System.Int64)">
            <summary>
            A constructor.
            </summary>
            <param name="type">The binary number type of the numbers in the underlying <see cref="T:System.IO.Stream"/>.</param>
            <param name="length">The maximum number of bytes to read.</param>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Binary.Loader.Type">
            <summary>
            Gets or sets the <see cref="P:JohnsHope.FPlot.Library.Binary.Loader.Type"/> used by the Loader to read binary numbers.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Binary.Loader.ReadLength">
            <summary>
            Gets or sets the maximum bytes read by the Loader.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Binary.Loader.BigEndian">
            <summary>
            Gets or sets the endian format of the numbers read by the Loader.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Loader.CopyFrom(JohnsHope.FPlot.Library.Binary.Loader)">
            <summary>
            Copies the Loader from another Loader.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Loader.Load(System.IO.Stream)">
            <summary>
            Loads the <see cref="T:JohnsHope.FPlot.Library.DataItem"/> from a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Loader.Clone">
            <summary>
            Creates a copy of the Loader.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Loader.GetSource">
            <summary>
            Always returns null, because this <see cref="T:JohnsHope.FPlot.Library.Item"/> needs not to be compiled.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Loader.Compile">
            <summary>
            Does nothing and always returns true, because this <see cref="T:JohnsHope.FPlot.Library.Item"/> needs not to be compiled.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Reader(System.IO.Stream,System.Int64,System.Type,System.Boolean)">
            <summary>
            Returns a <see cref="T:JohnsHope.FPlot.Library.Binary.DataReader">Binary.DataReader</see> that reads from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="length">The maximum number of bytes to read.</param>
            <param name="type">The number type.</param>
            <param name="bigEndian">Set to true if the numbers are stored in big endian format in the <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Reader(System.IO.Stream,System.Int64,System.Type)">
            <summary>
            Returns a <see cref="T:JohnsHope.FPlot.Library.Binary.DataReader">Binary.DataReader</see> that reads from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="length">The maximum number of bytes to read.</param>
            <param name="type">The number type.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Reader(System.IO.Stream,System.Type,System.Boolean)">
            <summary>
            Returns a <see cref="T:JohnsHope.FPlot.Library.Binary.DataReader">Binary.DataReader</see> that reads from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="type">The number type.</param>
            <param name="bigEndian">Set to true if the numbers are stored in big endian format in the <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Reader(System.IO.Stream,System.Type)">
            <summary>
            Returns a <see cref="T:JohnsHope.FPlot.Library.Binary.DataReader">Binary.DataReader</see> that reads from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="type">The number type.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Data(System.IO.Stream,System.Int64,System.Type,System.Boolean)">
            <summary>
            Returns a BigData object that contains the binary numbers from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="length">The maximum number of bytes to read.</param>
            <param name="type">The number type.</param>
            <param name="bigEndian">Set to true if the numbers are stored in big endian format in the <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Data(System.IO.Stream,System.Int64,System.Type)">
            <summary>
            Returns a BigData object that contains the binary numbers from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="length">The maximum number of bytes to read.</param>
            <param name="type">The number type.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Data(System.IO.Stream,System.Type,System.Boolean)">
            <summary>
            Returns a BigData object that contains the binary numbers from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="type">The number type.</param>
            <param name="bigEndian">Set to true if the numbers are stored in big endian format in the <see cref="T:System.IO.Stream"/>.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Binary.Data(System.IO.Stream,System.Type)">
            <summary>
            Returns a BigData object that contains the binary numbers from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="type">The number type.</param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.BitmapBuilder">
            <summary>
            A class that allows fast access to the pixels of a bitmap
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.BitmapBuilder.Bitmap">
            <summary>
            The <see cref="P:JohnsHope.FPlot.Library.BitmapBuilder.Bitmap"/>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.BitmapBuilder.Graphics">
            <summary>
            A Graphics object that can be used to draw to the bitmap.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.BitmapBuilder.Lock">
            <summary>
            Locks the bitmap to allow accessing individual pixels.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.BitmapBuilder.Unlock">
            <summary>
            Unlocks the bitmap.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.BitmapBuilder.Bounds">
            <summary>
            The bitmaps bounds.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.BitmapBuilder.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.BitmapBuilder.#ctor(System.Drawing.Rectangle)">
            <summary>
            Creates a bitmap of the specified size with the <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.BitmapBuilder.CopyFrom(JohnsHope.FPlot.Library.BitmapBuilder)">
            <summary>
            Copies a BitmapBuilder from another BitmapBuilder.
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.BitmapBuilder.Clone">
            <summary>
            Creates a copy of the BitmapBuilder.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.BitmapBuilder.Pixel(System.Int32,System.Int32)">
            <summary>
            Returns a <c>int*</c> pointer to the specified pixel. The pixel coordinates are taken relative to the
            <c>Bounds.Location</c> passed to the constructor of the BitmapBuilder.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.BitmapBuilder.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the corresponding pixel. The pixel coordinates are taken relative to the
            <c>Bounds.Location</c> passed to the constructor of the BitmapBuilder.
            </summary>
            <param name="x">The x coordinate of the pixel.</param>
            <param name="y">The y coordinate of the pixel.</param>
            <param name="color">The color to set the pixel to.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.BitmapBuilder.TryPaint(System.Drawing.Graphics)">
            <summary>
            Paints the bitmap to the <see cref="P:JohnsHope.FPlot.Library.BitmapBuilder.Graphics"/> g if the bitmap is not locked. Returns true if the bitmap was painted
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.ItemList">
            <summary>
            A serializable collection of Items that automatically compiles the Items upon deserialization.
            Registered IItemEventHandler will be notified of Item mutations. Each Item can be contained only once in the list.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.ItemList.Handlers">
            <summary>
            A list of handlers that notify IItemEventHandler objects of mutations.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.#ctor">
            <summary>
            The empty constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.#ctor(System.Collections.Generic.IEnumerable{JohnsHope.FPlot.Library.Item})">
            <summary>
            Initializes a new ItemList with a shallow copy from source.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.HandleUpdate(JohnsHope.FPlot.Library.Item)">
            <summary>
            Handles the IItemEventHanlder UpdateItem call.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.HandleAdd(JohnsHope.FPlot.Library.Item)">
            <summary>
            Handles the IItemEventHanlder AddItem call.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.HandleRemove(JohnsHope.FPlot.Library.Item)">
            <summary>
            Handles the IItemEventHanlder RemoveItem call.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.HandleReplace(JohnsHope.FPlot.Library.Item,JohnsHope.FPlot.Library.Item)">
            <summary>
            Handles the IItemEventHanlder ReplaceItem call.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.HandleReorder(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Handles the IItemEventHanlder ReorderItems call.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.HandleInvalidate">
            <summary>
            Handles the IItemEventHanlder InvalidateModel call.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.BroadcastUpdate(JohnsHope.FPlot.Library.Item)">
            <summary>
            This method handles updates. It is called by Update.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.BroadcastAdd(JohnsHope.FPlot.Library.Item)">
            <summary>
            This method handles Item additions. It is called by Add, AddRange, Insert and InsertRange
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.BroadcastRemove(JohnsHope.FPlot.Library.Item)">
            <summary>
            This method handles Item removals. It is called by Clear, Remove, RemoveAll, RemoveAt and RemoveRange
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.BroadcastReplace(JohnsHope.FPlot.Library.Item,JohnsHope.FPlot.Library.Item)">
            <summary>
            This method handles Item replacements. It is called by the indexer and Replace
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.BroadcastReorder(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            This method handles Item reorderings. It is called by Reorder
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.BroadcastInvalidate">
            <summary>
            This method handles Model Mutations.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.ItemList.Item(System.Int32)">
            <summary>
            The indexer of ItemList. Calls BroadcastReplace.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:JohnsHope.FPlot.Library.ItemList.Item(System.String)">
            <summary>
            The name indexer of ItemList (readonly).
            </summary>
            <param name="name">The name of the Item</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.Add(JohnsHope.FPlot.Library.Item)">
            <summary>
            Adds an Item to the list. Afterwards, BroadcastAdd is called.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.AddRange(System.Collections.Generic.IEnumerable{JohnsHope.FPlot.Library.Item})">
            <summary>
            Adds an Item collection to the list using <see cref="M:JohnsHope.FPlot.Library.ItemList.Add(JohnsHope.FPlot.Library.Item)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.Clear">
            <summary>
            Clears the list. Afterwards, BroadcastRemove(null) is called
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.Insert(System.Int32,JohnsHope.FPlot.Library.Item)">
            <summary>
            Inserts an Item into the list. Afterwards, BroadcastAdd is called.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{JohnsHope.FPlot.Library.Item})">
            <summary>
            Inserts a collection of Items into the list. Afterwards, BroadcastAdd(null) is called.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.Remove(JohnsHope.FPlot.Library.Item)">
            <summary>
            Removes an Item from the list. Afterwards, BroadcastRemove is called.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.RemoveAll(System.Predicate{JohnsHope.FPlot.Library.Item})">
            <summary>
            Removes Items that match the Predicate from the list. Afterwards, BroadcastRemove(null) is called.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.RemoveAt(System.Int32)">
            <summary>
            Removes the Item at the specified index from the list. Afterwards, BroadcastRemove is called.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a specified range of Items from the list using <see cref="M:JohnsHope.FPlot.Library.ItemList.RemoveAt(System.Int32)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.Update(JohnsHope.FPlot.Library.Item)">
            <summary>
            Notifies installed handles about an Item modification. Calls BroadcastUpdate.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.Replace(JohnsHope.FPlot.Library.Item,JohnsHope.FPlot.Library.Item)">
            <summary>
            Replaces an old Item with a new one. Afterwards, BroadcastReplace is called.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.Reorder(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Reorders the ItemList accoring to order
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves an item in the list to a new position
            </summary>
            <param name="src">The index of the item.</param>
            <param name="dest">The new index.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.Invalidate">
            <summary>
            Notifies the Handlers about a Model mutation.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.CopyFrom(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Copies all Items from another ItemList.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.Clone">
            <summary>
            Creates a shallow copy of the ItemList. Handlers are not copied.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.IsFitable">
            <summary>
            Returns true if the <c>ItemList</c> contains data and a function that can be fitted for.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemList.IsEvalable">
            <summary>
            Returns true if the <c>ItemList</c> contains a function that can be evaluated
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Command">
            <summary>
            A class that represents a C# statement that can be executed.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Command.Instance">
            <summary>
            The base class of a compiled instance. Used internally.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Command.Instance.Run">
            <summary>
            Runs the C# statement.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Command.Compiled">
            <summary>
            If true, the command was compiled successfully.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Command.Exception">
            <summary>
            The Exception that occured during execution of the command or null if there was no exception.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Command.CompilerResults">
            <summary>
            The results from the compilation of the item.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Command.TypeIndex">
            <summary>
            The <see cref="P:JohnsHope.FPlot.Library.ICompilable.TypeIndex">TypeIndex</see> used by the compiler. Used internally by the <see cref="T:JohnsHope.FPlot.Library.Compiler"/>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Command.FirstSourceLine">
            <summary>
            Returns the linenumber of the first source line. Always returns 1.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Command.Source">
            <summary>
            The source of the command
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Command.GetSource">
            <summary>
            Returns the source of the command. Used internally by the <see cref="T:JohnsHope.FPlot.Library.Compiler"/>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Command.ClassInstance">
            <summary>
            Sets the class instance. Used internally by the <see cref="T:JohnsHope.FPlot.Library.Compiler"/>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Command.ClassName">
            <summary>
            Gets the class name for the compiler. Used internally by the <see cref="T:JohnsHope.FPlot.Library.Compiler"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Command.Run">
            <summary>
            Runs the command after it was successfully compiled.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Command.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Command.#ctor(System.String)">
            <summary>
            This constructor automatically compiles and runs the code passed in source. If the code could not be compiled, 
            <see cref="F:JohnsHope.FPlot.Library.Command.Compiled"/> will be false. If there was an <see cref="T:System.Exception">Exception</see> during execution
            of the code, <see cref="F:JohnsHope.FPlot.Library.Command.Exception"/> will contain the Exception,
            otherwise it will be null.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Command.CopyFrom(JohnsHope.FPlot.Library.Command)">
            <summary>
            Copies from another Command.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Command.Clone">
            <summary>
            Creates a copy of the command.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Command.ToString">
            <summary>
            Returns the Source of the command. 
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.ICompilable">
            <summary>
            Represents an object that can be compiled
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ICompilable.GetSource">
            <summary>
            Returns the source that will be compiled. 
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.ICompilable.TypeIndex">
            <summary>
            Sets or gets the index of the created dll and of the class-name. A class that implements ICompilable should simply
            store the TypeIndex locally and set the class name in the source that will be compiled accordingly.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.ICompilable.CompilerResults">
            <summary>
            Sets or gets the <see cref="P:JohnsHope.FPlot.Library.ICompilable.CompilerResults"/> of this object.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.ICompilable.FirstSourceLine">
            <summary>
            Returns the position of the first line in the source.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.ICompilableWithNoHeader">
            <summary>
            Describes an ICompilable where no <see cref="T:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader">SourceHeader</see> header from the compiler
            options is inserted into the source.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.ICompilableLibrary">
            <summary>
            This interface represents a library.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ICompilableLibrary.GetName">
            <summary>
            Gets the name of the library
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.ICompilableLibrary.Version">
            <summary>
            Returns the version of the library
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.ICompilableClass">
            <summary>
            Represents a class that can be compiled and loaded.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.ICompilableClass.ClassName">
            <summary>
            Gets the type name of the class.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.ICompilableClass.ClassInstance">
            <summary>
            Sets an instance of the class.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.CompilerOptions">
            <summary>
            A class describing compiler options.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader">
            <summary>
            A class that implements the header section of source files that import namespaces with the "using" keyword.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader.text">
            <summary>
            The text of the header section of source files.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader.Text">
            <summary>
            Gets or sets the text of the source header. When set, the text is sorted automatically.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader.OnTextChanged">
            <summary>
            Calles the TextChanged event.
            </summary>
        </member>
        <member name="E:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader.TextChanged">
            <summary>
            Is fired when the <see cref="P:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader.Text"/> has changed.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader.Combine(System.String)">
            <summary>
            Combines the UsingHeader with the passed text and sorts it.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader.Combine(JohnsHope.FPlot.Library.CompilerOptions.SourceHeader)">
            <summary>
            Combines the UsingHeader with another UsingHeader and sorts it.
            </summary>
            <param name="h"></param>
        </member>
        <member name="P:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader.Lines">
            <summary>
            Counts the number of lines in <see cref="P:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader.Text"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader.GetSource">
            <summary>
            Returns the source of the UsingHeader. Used internally by the <see cref="T:JohnsHope.FPlot.Library.Compiler"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader.GetSnapshot(System.String@,System.Int32@)">
            <summary>
            Gets a thread safe snapshot of this SourceHeader. Used internally by the <see cref="T:JohnsHope.FPlot.Library.Compiler"/>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader.CompilerResults">
            <summary>
            Gets or sets the <see cref="P:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader.CompilerResults"/> of the last compilation.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.SourceHeader.AddUsing(System.String)">
            <summary>
            Adds a single using directive to the SourceHeader.
            </summary>
            <param name="ns">The namespace to import.</param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly">
            <summary>
            A class that describes an Assembly that is imported and is packaged into the *.fplot file upon serialization,
            so the *.fplot file works even on machines where the assembly is not present.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly.ValidAssembly(System.String)">
            <summary>
            Checks if the passed filename is a valid assembly path.
            </summary>
            <param name="file">The path to the assembly.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly.#ctor(System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="file">Sets the <see cref="P:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly.OriginalFileName"/> to file.</param>
        </member>
        <member name="P:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly.FileName">
            <summary>
            The name of the dll file the PackagedAssembly currently is stored in. This filename does not necessarily correspond to
            the <see cref="P:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly.OriginalFileName"/>. If the assembly was deserialized from a *.fplot file it will be stored under a
            custom name in the <see cref="F:JohnsHope.FPlot.Library.Compiler.TempPath"/>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly.OriginalFileName">
            <summary>
            The original filename of the assembly before it was serialized.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly.OriginalName">
            <summary>
            The original filename without path of the assembly.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly.SaveAs(System.String)">
            <summary>
            Saves the assembly under the passed filename.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly.Version">
            <summary>
            The version of the assembly.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection">
            <summary>
            A collection of <see cref="T:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly"/>es.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection.#ctor(System.Collections.Generic.IEnumerable{JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly})">
            <summary>
            A constructor that add a list of assemblies to the collection.
            </summary>
            <param name="source">The list to copy into the collection.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            A constructor that add a list of assemblies to the collection.
            </summary>
            <param name="source">The list to copy into the collection.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection.Contains(JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly)">
            <summary>
            Returns true if the assembly or an newer version of the assembly is contained in the collection.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection.Contains(System.String)">
            <summary>
            Returns true if the assembly or an newer version of the assembly is contained in the collection.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection.Add(JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly)">
            <summary>
            Adds an assembly to the collection.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection.Add(System.String)">
            <summary>
            Adds a dll to the packaged assemblies collection.
            </summary>
            <param name="dll">The full filename to the dll.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection.AddRange(System.Collections.Generic.IEnumerable{JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly})">
            <summary>
            Adds a list of PackagedAssemblies to the collection.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a list of PackagedAssemblies to the collection.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection.CopyTo(JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly[],System.Int32)">
            <summary>
            Copies the collection to an array.
            </summary>
            <param name="array">The array to copy to.</param>
            <param name="arrayIndex">The starting index.</param>
        </member>
        <member name="P:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection.Count">
            <summary>
            The number of assemblies in the collection.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection.IsReadOnly">
            <summary>
            always false.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection.Remove(JohnsHope.FPlot.Library.CompilerOptions.PackagedAssembly)">
            <summary>
            Removes the assembly from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>Returns true if the item was in the collection and removed.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection.Remove(System.String)">
            <summary>
            Removes the assembly from the collection.
            </summary>
            <param name="dll">The full filename of the Assembly to remove.</param>
            <returns>Returns true if the item was in the collection and removed.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.PackagedAssemblyCollection.GetEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;PackagedAssembly&gt;</see>.
            </summary>
            <returns></returns>
        </member>
        <member name="F:JohnsHope.FPlot.Library.CompilerOptions.Optimize">
            <summary>
            Turns optimization on.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.CompilerOptions.AllowUnsafe">
            <summary>
            Allows unsafe code.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.CompilerOptions.Debug">
            <summary>
            Turns creation of debug info on.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.CompilerOptions.CheckOverflow">
            <summary>
            Turns checks for arithmetic overflow on.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.CompilerOptions.WarningLevel">
            <summary>
            Sets the warning level.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.CompilerOptions.Imports">
            <summary>
            The referenced dll's. Mscorlib and System.dll and System.Drawing.dll are imported by default.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.CompilerOptions.PackagedImports">
            <summary>
            Imports whose assemblies are packaged into the *.fplot file, so the *.fplot files are portable.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.CompilerOptions.Header">
            <summary>
            A header that is inserted before any compiled source (except for classes that derive from ICompilableWithNoHeader, like
            ICompilableLibrary).
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.CompilerOptions.AutoUseLibraryNamespace">
            <summary>
            If set to true, when a library is compiled the compiler includes it's namespace into the Compiler.Options.Header automatically.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.CompilerOptions.ImportComparer">
            <summary>
            A comparer for import strings. Places import dlls in the order System.*, Microsoft.*, *.*, C:\*.*.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.CompilerOptions.ImportComparer.Comparer">
            <summary>
            A static instance of the comparer.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.ImportComparer.Compare(System.String,System.String)">
            <summary>
            Compares two strings.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.SortImports(System.Collections.Generic.List{System.String})">
            <summary>
            Sorts <see cref="F:JohnsHope.FPlot.Library.CompilerOptions.Imports"/> and removes duplicate entries.
            </summary>
            <param name="Imports">The <see cref="T:System.Collections.Generic.List`1">List&lt;string&gt;</see> to sort.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.SortImports">
            <summary>
            Sorts <see cref="F:JohnsHope.FPlot.Library.CompilerOptions.Imports"/> and removes duplicate entries.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CompilerOptions.Combine(JohnsHope.FPlot.Library.CompilerOptions)">
            <summary>
            Combines two CompilerOptions to the least restrictive level
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Compiler">
            <summary>
            This class represents a C# compiler with options.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Compiler.Options">
            <summary>
            The <see cref="T:JohnsHope.FPlot.Library.CompilerOptions">compiler options</see>.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Compiler.TempPath">
            <summary>
            The path where the source files and compiled items dll's are stored.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Compiler.SourceFile(JohnsHope.FPlot.Library.ICompilable)">
            <summary>
            Returns the name of the temporary source file used to compile the ICompilable c.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Compiler.ICompilable(System.String)">
            <summary>
            Returns an <see cref="M:JohnsHope.FPlot.Library.Compiler.ICompilable(System.String)"/> object known to the compiler from the given source file name. This can be used to
            resolve source files in stack-trace info. 
            </summary>
            <param name="sourceFile">The filename as returned by <see cref="M:JohnsHope.FPlot.Library.Compiler.SourceFile(JohnsHope.FPlot.Library.ICompilable)"/>.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Compiler.ICompilableInfo(System.String,JohnsHope.FPlot.Library.ICompilable@,System.Int32@)">
            <summary>
            Get's the <see cref="M:JohnsHope.FPlot.Library.Compiler.ICompilable(System.String)"/> object known to the compiler from the given source file name, and gets the number of
            header lines that where added in front of the source. This can be used to resolve source files in stack-trace info. 
            </summary>
            <param name="sourceFile">The filename as returned by <see cref="M:JohnsHope.FPlot.Library.Compiler.SourceFile(JohnsHope.FPlot.Library.ICompilable)"/>.</param>
            <param name="c">The ICompilable that corresponds to the passed source file.</param>
            <param name="headerLines">The number of source header lines that where inserted in front of the compiled source.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Compiler.Knows(JohnsHope.FPlot.Library.ICompilable)">
            <summary>
            Returns true if obj is in the Items list.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Compiler.Add(JohnsHope.FPlot.Library.ICompilable)">
            <summary>
            Adds obj to the list of <see cref="M:JohnsHope.FPlot.Library.Compiler.ICompilable(System.String)"/>'s that will be recompiled if a <see cref="T:JohnsHope.FPlot.Library.ICompilableLibrary"/> is compiled.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Compiler.Compile(JohnsHope.FPlot.Library.ICompilable,System.Boolean)">
            <summary>
            Compiles an <see cref="M:JohnsHope.FPlot.Library.Compiler.ICompilable(System.String)"/>.
            </summary>
            <param name="obj">The item to compile.</param>
            <param name="recompile">If true the item will be compiled even if the source remained the same</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Compiler.Compile(JohnsHope.FPlot.Library.ICompilable)">
            <summary>
            Compiles an <see cref="M:JohnsHope.FPlot.Library.Compiler.ICompilable(System.String)"/>.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Compiler.SourceLocation">
            <summary>
            Describes a spot in a compiled source, for example where an exception occured.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Compiler.SourceLocation.File">
            <summary>
            The filename of the compiled source file where the exception occured.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Compiler.SourceLocation.Line">
            <summary>
            The line in the sourcecode that caused the exception.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Compiler.SourceLocation.Column">
            <summary>
            The column in the sourcecode that caused the exception.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Compiler.SourceLocation.Method">
            <summary>
            The Method that caused the exception.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Compiler.SourceLocation.Source">
            <summary>
            The <see cref="M:JohnsHope.FPlot.Library.Compiler.ICompilable(System.String)"/>, where the exception occured.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Compiler.SourceLocation.Exception">
            <summary>
            The Exception that occured.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Compiler.SourceLocation.Clone">
            <summary>
            Creates a copy of the SourceLocation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Compiler.StackTrace">
            <summary>
            Describes the stack trace of an exception. This type is a list of <see cref="T:JohnsHope.FPlot.Library.Compiler.SourceLocation"/>'s, which in turn describe
            a spot in a <see cref="M:JohnsHope.FPlot.Library.Compiler.ICompilable(System.String)"/>'s source.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Compiler.StackTrace.#ctor(System.Exception)">
            <summary>
            Creates a new StackTrace from the <see cref="T:System.Exception">Exception</see> e.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.CustomFunction1D">
             <summary>
              A class that can be used to implement your own 1D functions. Example:
             <code>
            	class SineFunction: CustomFunction1D {
            		public override double f(double x) {
            			NEval++; // counts the number of function evaluations.
            			return System.Math.Sin(x);
            		}
            	}
            ...
             // Add a SineFunction to a Plot:
             Plot.Model.Add(new SineFunction());
             </code>
             </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CustomFunction1D.GetSource">
            <summary>
            Always retruns null, so this item has no source that will be compiled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CustomFunction1D.f(System.Double)">
            <summary>
            The default implementation of the function. Increments <see cref="F:JohnsHope.FPlot.Library.FunctionItem.NEval"/> and returns <c>double.NaN</c>.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.CustomFunction2D">
             <summary>
              A class that can be used to implement your own 2D functions.
             <code>
            	class CircleFunction: CustomFunction1D {
            		public override double f(double x, double y) {
            			NEval++; // counts the number of function evaluations.
            			return System.Math.Sqrt(x*x + y*y);
            		}
            	}
            ...
             // Add a CircleFunction to a Plot:
             Plot.Model.Add(new CircleFunction());
             </code>
             </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CustomFunction2D.GetSource">
            <summary>
            Always retruns null, so this item has no source that will be compiled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CustomFunction2D.f(System.Double,System.Double)">
            <summary>
            The default implementation of the function. Increments <c>NEval</c> and returns <c>double.NaN</c>.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.CustomFunctionColor">
             <summary>
              A class that can be used to implement your own color functions.
             <code>
            	class BlueFunction: CustomFunction1D {
            		public override double f(double x, double y) {
            			NEval++; // counts the number of function evaluations.
            			return System.Drawing.Color.Blue;
            		}
            	}
            ...
             // Add a BlueFunction to a Plot:
             Plot.Model.Add(new BlueFunction());
             </code>
             </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CustomFunctionColor.GetSource">
            <summary>
            Always retruns null, so this item has no source that will be compiled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.CustomFunctionColor.f(System.Double,System.Double)">
            <summary>
            The default implementation of the function. Increments <see cref="F:JohnsHope.FPlot.Library.FunctionItem.NEval"/> and returns <c>double.NaN</c>.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.DataColumn">
            <summary>
            Represents a column of data in a matrix with x, y, z, dx, dy and dz vectors.
            The values of the data array can either be drawn from a <see cref="T:JohnsHope.FPlot.Library.BigData">BigData</see> array or from a formula
            specified in the property <see cref="P:JohnsHope.FPlot.Library.DataColumn.Source">Source</see>.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.DataColumn.Instance">
            <summary>
            A <see cref="T:JohnsHope.FPlot.Library.DataColumn"/> compiled instance object
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataColumn.Instance.Parent">
            <summary>
            The <see cref="T:JohnsHope.FPlot.Library.DataItem"/> this instance belongs to.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.Instance.Length">
            <summary>
            The Length of the data.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.Instance.x">
            <summary>
            The x array.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.Instance.y">
            <summary>
            The y array.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.Instance.z">
            <summary>
            The z array.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.Instance.dx">
            <summary>
            The dx array.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.Instance.dy">
            <summary>
            The dy array.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.Instance.dz">
            <summary>
            The dz array.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumn.Instance.Reset">
            <summary>
            Is obsolete. Does nothing.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.Instance.Item(System.Int32)">
            <summary>
            The indexer.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.Instance.Item(System.Double)">
            <summary>
            The indexer with a double argumnent
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumn.Instance.CopyFrom(JohnsHope.FPlot.Library.DataColumn.Instance)">
            <summary>
            Copies from another instance.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumn.Instance.Clone">
            <summary>
            Creates a deep copy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.Parent">
            <summary>
            The parent <see cref="T:JohnsHope.FPlot.Library.DataItem"/>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.Type">
            <summary>
            The base type of the DataColumn.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumn.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumn.#ctor(JohnsHope.FPlot.Library.DataItem)">
            <summary>
            A constructor setting the parent <see cref="T:JohnsHope.FPlot.Library.DataItem">DataItem</see>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumn.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            A constructor setting the parent <see cref="T:JohnsHope.FPlot.Library.DataItem">DataItem</see>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.Source">
            <summary>
            Gets or sets the formula used for this DataColumn. The formula must be a regular C# expression that can refer to the variables
            <c>n</c>, <c>Length</c>, <c>x[n]</c>, <c>y[n]</c>, <c>z[n]</c>, <c>dx[n]</c>, <c>dy[n]</c> and <c>dz[n]</c>. 
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.Length">
            <summary>
            Gets or sets the length of this DataColumn.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.Item(System.Int32)">
            <summary>
            The indexer of the DataColumn.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.CanWrite">
            <summary>
            A value indicating if the DataColumn can store values, or if it is readonly.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumn.CopyFrom(JohnsHope.FPlot.Library.DataColumn)">
            <summary>
            Copies from another DataColumn with either a deep or shallow copy, depending on the value of
            the <see cref="F:JohnsHope.FPlot.Library.Data.deepCopy">deepCopy</see> field. 
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumn.Clone(JohnsHope.FPlot.Library.DataItem)">
            <summary>
            Creates either a deep or a shallow copy, depending on the value of the <c>deepCopy"</c> field.
            </summary>
            <param name="Parent">The parent <see cref="T:JohnsHope.FPlot.Library.DataItem">DataItem</see> of the copy.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumn.Clone">
            <summary>
            Creates either a deep or a shallow copy, depending on the value of the <c>deepCopy"</c> field.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.TypeIndex">
            <summary>
            The TypeIndex used for the compiler.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.FirstSourceLine">
            <summary>
            Returns the linenumber of the first source line. Always returns 1.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumn.GetSource">
            <summary>
            Returns the source for the compiler.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.ClassName">
            <summary>
            Gets the classname for the compiler.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.ClassInstance">
            <summary>
            Sets the class instance (used by the compiler).
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataColumn.CompilerResults">
            <summary>
            The results of the compilation.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumn.FormulaColumn(JohnsHope.FPlot.Library.DataItem,System.String)">
            <summary>
            Returns a new DataColumn that is computed after the given formula
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumn.FormulaColumn(System.String)">
            <summary>
            Returns a new DataColumn that is computed after the given formula
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumn.NaNColumn(JohnsHope.FPlot.Library.DataItem)">
            <summary>
            Returns a new DataColumn that always returns double.NaN
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumn.NaNColumn">
            <summary>
            Returns a new DataColumn that always returns double.NaN
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumn.Compile">
            <summary>
            Compiles the <c>DataColumn</c>.
            </summary>
            <returns>Returns true if the <c>DataColumn</c> was successfully compiled.</returns>
        </member>
        <member name="T:JohnsHope.FPlot.Library.DataColumnSerializer">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataColumnSerializer.source">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataColumnSerializer.Parent">
            <summary>
            The parent <see cref="T:JohnsHope.FPlot.Library.DataItem"/>.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataColumnSerializer.Type">
            <summary>
            The base type of the DataColumn.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumnSerializer.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataColumnSerializer.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            A constructor setting the parent <see cref="T:JohnsHope.FPlot.Library.DataItem">DataItem</see>.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.DataItem">
            <summary>
            A <see cref="T:JohnsHope.FPlot.Library.Item">Item</see> class that implements data with the six columns x, y, z, dx, dy and dz, representing
            x, y and z data and the corresponding errors.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.DataItem.Instance">
            <summary>
            A compiled instance of the DataItem.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItem.Instance.Parent">
            <summary>
            The DataItem the Instance belongs to.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.Instance.x">
            <summary>
            The DataColumn x.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.Instance.y">
            <summary>
            The DataColumn x.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.Instance.z">
            <summary>
            The DataColumn x.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.Instance.dx">
            <summary>
            The DataColumn x.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.Instance.dy">
            <summary>
            The DataColumn x.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.Instance.dz">
            <summary>
            The DataColumn x.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.Instance.Length">
            <summary>
            The Length of the columns. 
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.Instance.Index(System.Int32)">
            <summary>
            Returns an index to the DataColumns according to the dimensionality and column id
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.Instance.Item(System.Int32)">
            <summary>
            Returns the DataColumn according to the dimensionality and column id
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.Instance.Item(System.Int32,System.Int32)">
            <summary>
            Set or gets the double element this[column][row].
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.Instance.Dimensions">
            <summary>
            Returns the Dimensions of the Parent DataItem.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.Instance.ErrorColumns">
            <summary>
            Returns the Dimensions of the Parent DataItem.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.Instance.CopyFrom(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Stores the values from data into the DataItem.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.Instance.ASCIIData(System.IO.Stream,System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Reads text numbers from a <see cref="T:System.IO.Stream"/> and returns them as a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from</param>
            <param name="separators">The characters that separate the numbers</param>
            <param name="numberFormat">A <c>System.Globalization.NumberFormat</c> object that describes the number format, for example 3,141
            instead of 3.141. You can get a NumberFormat object for the current culture from
            <c>System.Globalization.CultureInfo.CurrentUICulture.NumberFormat</c>.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.Instance.ASCIIData(System.IO.Stream,System.String)">
            <summary>
            Reads text numbers from a <see cref="T:System.IO.Stream"/> and returns them as a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.
            </summary>
            <param name="stream">The Stream to read from</param>
            <param name="separators">The characters that separate the numbers</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.Instance.BinaryData(System.IO.Stream,System.Type,System.Boolean)">
            <summary>
            Reads a IList of double values from a binary stream
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="type">The binary type of the numbers</param>
            <param name="BigEndian">If true, the numbers are read in big-endian format</param>
            <returns>A IList of double values read</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.Instance.WAVData(System.IO.Stream,System.Int32,System.Double@)">
            <summary>
            Reads data from a WAV (PCM) file stream and returns them as a <see cref="T:JohnsHope.FPlot.Library.BigData">BigData</see> object.
            </summary>
            <param name="stream">The WAV file stream to read from</param>
            <param name="channel">The channel of the WAV data that is read. Only this channel will be read.</param>
            <param name="SampleRate">The sampling rate of the WAV data in Hz.</param>
            <returns>An <c>IList</c> of double values read.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.Instance.WAVData(System.IO.Stream,System.Double@)">
            <summary>
            Reads data from a WAV (PCM) file stream and returns them as a <see cref="T:JohnsHope.FPlot.Library.BigData">BigData</see> object.
            All channels of the WAV file are read.
            </summary>
            <param name="stream">The WAV file stream to read from</param>
            <param name="SampleRate">The sampling rate of the WAV data in Hz.</param>
            <returns>An <c>IList</c> of double values read.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.Instance.Load(System.IO.Stream)">
            <summary>
            Loads the Instance from a stream.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.Instance.Clone">
            <summary>
            Creates a deep copy of the instance.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.x">
            <summary>
            The DataColumn x.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.y">
            <summary>
            The DataColumn y.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.z">
            <summary>
            The DataColumn z.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.dx">
            <summary>
            The DataColumn dx.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.dy">
            <summary>
            The DataColumn dy.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.dz">
            <summary>
            The DataColumn dz.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.Dimensions">
            <summary>
            The number of dimensions od the DataItem. If Dimensions == 1, only the x column is valid,
            if Dimensions == 2, the x and y columns are valid etc.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.ErrorColumns">
            <summary>
            If true the DataItem contains error columns
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.UseLowMemory">
            <summary>
            Gets or sets a value that indicates that the Set*Source methods will use a more complicated syntax but the resulting code
            will require less memory to load data.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.Color">
            <summary>
            The color the Data is drawn with.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.LineWidth">
            <summary>
            The line width the Data is drawn with. 
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.LineStyle">
            <summary>
            The line style used to draw the item.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.CopyFrom(JohnsHope.FPlot.Library.Item)">
            <summary>
            Copies from another DataItem.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.Index(System.Int32)">
            <summary>
            Returns an index to the DataColumns according to the dimensionality and column id
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.Item(System.Int32)">
            <summary>
            Returns the DataColumn according to the dimensionality and column id
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.Length">
            <summary>
            Sets or gets the length of the data.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.Modified">
            <summary>
            Indicates if the DataItem was modified. This value is automatically set, if data is changed.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.GetSource">
            <summary>
            Returns the sourcecode of the loadsource and the formulas of the DataColumns.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.ClassName">
            <summary>
            Gets the class name for the compiler.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataItem.ClassInstance">
            <summary>
            Sets the class instance for the compiler.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.Compile">
            <summary>
            Overrides Item.Compile. Compiles the DataItem and all DataColumns x, y, z, dx, dy, dz.
            </summary>
            <returns>Returns true if the DataItem and all DataColumns are compiled without errors.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.OnLoad(System.IO.Stream)">
            <summary>
            This routine loads the Data from a Stream. This method can be overriden an is used by the method Load.
            The method must load the data and assign it to the x, y, z, dx, dy and dz arrays. The Length of the arrays is
            adapted automatically.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.Load(System.IO.Stream)">
            <summary>
            This routine loads the DataItem from a Stream. 
            </summary>
            <param name="stream">The stream to load from</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.Load(System.String)">
            <summary>
            This routine loads the <c>DataItem</c> from a file.
            </summary>
            <param name="filename">The filename of the file to load from.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.Painter(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            Returns a Painter for the <c>DataItem</c>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.TypeName">
            <summary>
            Gets a user friendly name for the Item type.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.DataItems(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Returns all <c>DataItems</c> in a given <see href="ItemList">ItemList</see>
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.CopyFrom(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Stores the values from data into the DataItem
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.GetReadSource(System.String,JohnsHope.FPlot.Library.StringWriter)">
            <summary>
            Gets the source used to store the data in a <c>IList&lt;double&gt;</c> into the <c>DataItem</c>.
            </summary>
            <param name="data">The name of the variable the data is stored in.</param>
            <param name="str">The <c>StringBuilder</c> the resulting source code is appended to.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.SetLoadTextSource(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Sets the <see cref="F:JohnsHope.FPlot.Library.DataItemSerializer.Source"/> of this <c>DataItem</c> to source code that loads an text file.
            </summary>
            <param name="separators">The string of separator characters that separates individual numbers.</param>
            <param name="LocalizedNumberFormat">If true, the localized number format is used, for example 3,141
            instead of 3.141.</param>
            <param name="encoding">The text encoding to use.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.SetLoadASCIISource(System.String,System.Boolean)">
            <summary>
            Sets the <see cref="F:JohnsHope.FPlot.Library.DataItemSerializer.Source"/> of this <c>DataItem</c> to source code that loads an text file. This method is obsolete,
            use SetLoadTextSource instead.
            </summary>
            <param name="separators">The string of separator characters that separates individual numbers.</param>
            <param name="LocalizedNumberFormat">If true, the localized number format is used, for example 3,141
            instead of 3.141.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.SetLoadBinarySource(System.Type,System.Boolean)">
            <summary>
            Sets the <see cref="F:JohnsHope.FPlot.Library.DataItemSerializer.Source"/> of this <c>DataItem</c> to source code that loads a binary file.
            </summary>
            <param name="type">The data type of an individual number in the file</param>
            <param name="BigEndian">If true big endian byte ordering is assumed, otherwise little endian.</param>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItem.AllChannels">
            <summary>
            If passed to <see cref="M:JohnsHope.FPlot.Library.DataItem.SetLoadWAVSource(System.Int32,JohnsHope.FPlot.Library.DataColumn)">SetLoadWAVSource</see>, all channels are loaded.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.SetLoadWAVSource(System.Int32,JohnsHope.FPlot.Library.DataColumn)">
            <summary>
             Sets the <see cref="F:JohnsHope.FPlot.Library.DataItemSerializer.Source"/> of this <c>DataItem</c> to source code that loads a WAV file.
            </summary>
            <param name="channel">The WAV file channel to load.</param>
            <param name="sampleColumn">The <see cref="T:JohnsHope.FPlot.Library.DataColumn"/> where to store the equally spaced sample points.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.SetLoadWAVSource(JohnsHope.FPlot.Library.DataColumn)">
            <summary>
             Sets the <see cref="F:JohnsHope.FPlot.Library.DataItemSerializer.Source"/> of this <c>DataItem</c> to source code that loads a WAV file.
            </summary>
            <param name="sampleColumn">The <see cref="T:JohnsHope.FPlot.Library.DataColumn"/> where to store the equally spaced sample points.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.SetLoadExcelSource(System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Sets the <see cref="F:JohnsHope.FPlot.Library.DataItemSerializer.Source"/> of this <c>DataItem</c> to source code that loads an Excel file.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.SetLoadExcelSource(System.Int32,System.Int32,System.Int32,System.String[])">
            <summary>
            Sets the <see cref="F:JohnsHope.FPlot.Library.DataItemSerializer.Source"/> of this <c>DataItem</c> to source code that loads an Excel file.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.SetLoadExcelSource(System.Int32,System.Int32,System.String[])">
            <summary>
            Sets the <see cref="F:JohnsHope.FPlot.Library.DataItemSerializer.Source"/> of this <c>DataItem</c> to source code that loads an Excel file.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.SetLoadExcelSource(System.Int32,System.String[])">
            <summary>
            Sets the <see cref="F:JohnsHope.FPlot.Library.DataItemSerializer.Source"/> of this <c>DataItem</c> to source code that loads an Excel file.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.SetLoadExcelSource(System.String[])">
            <summary>
            Sets the <see cref="F:JohnsHope.FPlot.Library.DataItemSerializer.Source"/> of this <c>DataItem</c> to source code that loads an Excel file.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadText(System.String,System.String,System.Globalization.NumberFormatInfo,System.Text.Encoding)">
            <summary>
            Loads an text file into the <c>DataItem</c>.
            </summary>
            <param name="filename">The file to load</param>
            <param name="separators">The string of separator characters that separates individual numbers.</param>
            <param name="numberFormat">The number format used, for example 3,141
            instead of 3.141.</param>
            <param name="encoding">The text encoding to use.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadText(System.String,System.String)">
            <summary>
            Loads an text file into the <c>DataItem</c>.
            </summary>
            <param name="filename">The file to load</param>
            <param name="separators">The string of separator characters that separates individual numbers.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadASCII(System.String,System.String,System.Boolean)">
            <summary>
            Loads an text file into the <c>DataItem</c>.
            </summary>
            <param name="filename">The file to load</param>
            <param name="separators">The string of separator characters that separates individual numbers.</param>
            <param name="LocalizedNumberFormat">If true, the localized number format is used, for example 3,141
            instead of 3.141.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadASCII(System.String,System.String)">
            <summary>
            Loads an ASCII file into the <c>DataItem</c>.
            </summary>
            <param name="filename">The file to load</param>
            <param name="separators">The string of separator characters that separates individual numbers.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadBinary(System.String,System.Type,System.Boolean)">
            <summary>
            Loads an binary file into the <c>DataItem</c>.
            </summary>
            <param name="filename">The file to load</param>
            <param name="type">The data type of an individual number in the file</param>
            <param name="BigEndian">If true big endian byte ordering is assumed, otherwise little endian.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadBinary(System.String,System.Type)">
            <summary>
            Loads an binary file into the <c>DataItem</c>.
            </summary>
            <param name="filename">The file to load</param>
            <param name="type">The data type of an individual number in the file</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadWAV(System.String,System.Int32,JohnsHope.FPlot.Library.DataColumn@)">
            <summary>
            Loads an binary file into the <c>DataItem</c>.
            </summary>
            <param name="filename">The file to load</param>
            <param name="channel">The WAV file channel to load.</param>
            <param name="sampleColumn">The <see cref="T:JohnsHope.FPlot.Library.DataColumn"/> that will be set to the equally spaced sample points.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadWAV(System.String,JohnsHope.FPlot.Library.DataColumn@)">
            <summary>
            Loads an binary file into the <c>DataItem</c>.
            </summary>
            <param name="filename">The file to load</param>
            <param name="sampleColumn">The <see cref="T:JohnsHope.FPlot.Library.DataColumn"/> that will be set to the equally spaced sample points.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadWAV(System.String,System.Int32,JohnsHope.FPlot.Library.DataColumn)">
            <summary>
            Loads an binary file into the <c>DataItem</c>.
            </summary>
            <param name="filename">The file to load</param>
            <param name="channel">The WAV file channel to load.</param>
            <param name="sampleColumn">The <see cref="T:JohnsHope.FPlot.Library.DataColumn"/> that will be set to the equally spaced sample points. Must be one of
            the x, y, z, dx, dy, dz DataColumns of the DataItem.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadWAV(System.String,JohnsHope.FPlot.Library.DataColumn)">
            <summary>
            Loads an binary file into the <c>DataItem</c>.
            </summary>
            <param name="filename">The file to load</param>
            <param name="sampleColumn">The <see cref="T:JohnsHope.FPlot.Library.DataColumn"/> that will be set to the equally spaced sample points. Must be one of
            the x, y, z, dx, dy, dz DataColumns of the DataItem.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadWAV(System.String,System.Int32)">
            <summary>
            Loads an binary file into the <c>DataItem</c>. The x <see cref="T:JohnsHope.FPlot.Library.DataColumn"/> of the DataItem is set to equally spaced
            sample points.Marks
            </summary>
            <param name="filename">The file to load</param>
            <param name="channel">The WAV file channel to load.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadWAV(System.String)">
            <summary>
            Loads an binary file into the <c>DataItem</c>. The x <see cref="T:JohnsHope.FPlot.Library.DataColumn"/> of the DataItem is set to equally spaced
            sample points.
            </summary>
            <param name="filename">The file to load</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadExcel(System.String,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Loads an Excel file into the <c>DataItem</c>. This functionality is only provided, if JohnsHope.FPlot.Excel.dll is loaded.
            </summary>
            <param name="filename">The file to load</param>
            <param name="sheet">The Excel worksheet (1 for the first worksheet)</param>
            <param name="startRow">The row where the numbers data start. (1 for the first row)</param>
            <param name="endRow">The row where the numbers data ends. (1 for the first row)</param>
            <param name="columns">The columns where the numbers are in. (1 for the first column)</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadExcel(System.String,System.Int32,System.Int32,System.Int32,System.String[])">
            <summary>
            Loads an Excel file into the <c>DataItem</c>. This functionality is only provided, if JohnsHope.FPlot.Excel.dll is loaded.
            </summary>
            <param name="filename">The file to load</param>
            <param name="sheet">The Excel worksheet (1 for the first worksheet)</param>
            <param name="startRow">The row where the numbers data start. (1 for the first row)</param>
            <param name="endRow">The row where the numbers data ends. (1 for the first row)</param>
            <param name="columns">The columns where the numbers are in. (like "A" for the first column, "B" for the second etc.)</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadExcel(System.String,System.Int32,System.Int32,System.String[])">
            <summary>
            Loads an Excel file into the <c>DataItem</c>. This functionality is only provided, if JohnsHope.FPlot.Excel.dll is loaded.
            </summary>
            <param name="filename">The file to load</param>
            <param name="sheet">The Excel worksheet (1 for the first worksheet)</param>
            <param name="startRow">The row where the numbers data start. (1 for the first row)</param>
            <param name="columns">The columns where the numbers are in. (like "A" for the first column, "B" for the second etc.)</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadExcel(System.String,System.Int32,System.String[])">
            <summary>
            Loads an Excel file into the <c>DataItem</c>. This functionality is only provided, if JohnsHope.FPlot.Excel.dll is loaded.
            </summary>
            <param name="filename">The file to load</param>
            <param name="startRow">The row where the numbers data start. (1 for the first row)</param>
            <param name="columns">The columns where the numbers are in. (like "A" for the first column, "B" for the second etc.)</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItem.LoadExcel(System.String,System.String[])">
            <summary>
            Loads an Excel file into the <c>DataItem</c>. This functionality is only provided, if JohnsHope.FPlot.Excel.dll is loaded.
            Source will be overwritten.
            </summary>
            <param name="filename">The file to load</param>
            <param name="columns">The columns where the numbers are in. (like "A" for the first column, "B" for the second etc.)</param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.DataItemPainter2D">
            <summary>
            A 2D <see cref="T:JohnsHope.FPlot.Library.Painter">Painter</see> for a DataItem.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItemPainter2D.#ctor(JohnsHope.FPlot.Library.PlotModel,JohnsHope.FPlot.Library.Item)">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItemPainter2D.Start(JohnsHope.FPlot.Library.Plot)">
            <summary>
            Starts recalculation of the Painter
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItemPainter2D.Calc(JohnsHope.FPlot.Library.Plot)">
            <summary>
            Recalculates the Painter's image data
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItemPainter2D.Paint(System.Drawing.Graphics,JohnsHope.FPlot.Library.Plot)">
            <summary>
            Paints the Painter.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.DataReader">
            <summary>
            A class that implements <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable&lt;double&gt;</see> and
            <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;double&gt;</see> and serves as a low memory
            consuming source of double values.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataReader.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            A constructor that initializes the DataReader with a <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerator&lt;double&gt;</see> to read from.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataReader.#ctor(System.Collections.Generic.IEnumerator{System.Double})">
            <summary>
            A constructor that initializes the DataReader with a <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerator&lt;double&gt;</see> to read from.
            </summary>
            <param name="enumerator"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataReader.GetEnumerator">
            <summary>
            Returns an enumerator for the DataReader.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for the DataReader.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataReader.Current">
            <summary>
            Returns the current double value as in IEnumerator&lt;double&gt;. Returns double.NaN if there is no value.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataReader.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current double value.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataReader.Dispose">
            <summary>
            Disposes the DataReader.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataReader.MoveNext">
            <summary>
            Moves to the next double value as in IEnumerator&lt;double&gt;.
            </summary>
            <returns>Returns true if there is a next value available.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataReader.Reset">
            <summary>
            Resets the DataReader to the beginning of the double values.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataReader.Read">
            <summary>
            Gets the next double value in the DataReader and moves to the next value. Returns double.NaN if there is no value available.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.DataReader.HasNext">
            <summary>
            Is true if there is a next value.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Excel">
            <summary>
            A class implements reading data from Excel-Sheets.
            Normally the functions of this class are disabled and throw an exception. In order to activate the 
            functions you must reference JohnsHope.FPlot.Excel.dll in your project which implements an extension of Excel that
            has the working functions in it. If you load the JohnsHope.FPlot.Excel.dll and call JohnsHope.FPlot.ExcelData.Excel.Init,
            it will assign it's implementation of the Excel class to the static variable Excel.Implementation,
            so that the Excel methods can use this implementation. JohnsHope.FPlot.Excel relies on a commercial dll NativeExcel.dll.
            If you use the Excel functionality in your projects, you must purchase a valid developpers license for NativeExcel for 120$
            from <a href="http://www.nika-soft.com">www.nika-soft.com</a>.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Excel.Implementation">
            <summary>
            An instance of an derived ExcelReader class that implements reading from Excel files. 
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Excel.Enumerator">
            <summary>
            A class that implements a <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;double&gt;</see> that reads from an Excel <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Excel.DataReader">
            <summary>
            A <see cref="T:JohnsHope.FPlot.Library.Excel.DataReader"/> class that implements reading numbers from an Excel <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.DataReader.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            A constructor that initializes the DataReader with a IEnumerable&lt;double&gt;.
            </summary>
            <param name="source">The source to initilaize the DataReader with.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.DataReader.#ctor(System.Collections.Generic.IEnumerator{System.Double})">
            <summary>
            A constructor that initializes the DataReader with a IEnumerator&lt;double&gt;.
            </summary>
            <param name="source">The source to initilaize the DataReader with.</param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Excel.Loader">
            <summary>
            A <see cref="T:JohnsHope.FPlot.Library.DataItem.Instance"/> class that implements fast loading of text data. This class is used internally
            by the method <see cref="M:JohnsHope.FPlot.Library.DataItem.LoadExcel(System.String,System.String[])"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Loader.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Loader.#ctor(System.String[])">
            <summary>
            A constructor.
            </summary>
            <param name="columns">The columns to read from.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Loader.#ctor(System.Int32,System.String[])">
            <summary>
            A constructor.
            </summary>
            <param name="startRow">The row where the data starts (1 for the first row) or -1 for the first occupied row.</param>
            <param name="columns">The columns to read from.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Loader.#ctor(System.Int32,System.Int32,System.String[])">
            <summary>
            A constructor.
            </summary>
            <param name="sheet">The worksheet to read from (1 for the first worksheet).</param>
            <param name="startRow">The row where the data starts (1 for the first row) or -1 for the first occupied row.</param>
            <param name="columns">The columns to read from.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Loader.#ctor(System.Int32,System.Int32,System.Int32,System.String[])">
            <summary>
            A constructor.
            </summary>
            <param name="sheet">The worksheet to read from (1 for the first worksheet).</param>
            <param name="startRow">The row where the data starts (1 for the first row) or -1 for the first occupied row.</param>
            <param name="endRow">The row where the data ends (1 for the first row) or -1 for the last occupied row.</param>
            <param name="columns">The columns to read from.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Loader.#ctor(System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            A constructor.
            </summary>
            <param name="sheet">The worksheet to read from (1 for the first worksheet).</param>
            <param name="startRow">The row where the data starts (1 for the first row) or -1 for the first occupied row.</param>
            <param name="endRow">The row where the data ends (1 for the first row) or -1 for the last occupied row.</param>
            <param name="columns">The columns to read from.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Loader.CopyFrom(JohnsHope.FPlot.Library.Excel.Loader)">
            <summary>
            Copies the Loader from another Loader.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Loader.Load(System.IO.Stream)">
            <summary>
            Loads the <see cref="T:JohnsHope.FPlot.Library.DataItem"/> from a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Loader.Clone">
            <summary>
            Creates a copy of the Loader.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Loader.GetSource">
            <summary>
            Always returns null, because this <see cref="T:JohnsHope.FPlot.Library.Item"/> needs not to be compiled.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Loader.Compile">
            <summary>
            Does nothing and always returns true, because this <see cref="T:JohnsHope.FPlot.Library.Item"/> needs not to be compiled.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.CellName(System.Int32,System.Int32)">
            <summary>
            Converts row and column numbers to Excel cell names, e.g. 3,4 to "D3" or 5,6 to "F6".
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Parse(System.Object,System.Double@)">
            <summary>
            Parses an Excel cell value to a double value.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.GetReader(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Gets a <see cref="T:JohnsHope.FPlot.Library.Excel.DataReader"/> that reads from an Excel file stream. Used internally.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.GetReader(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.String[])">
            <summary>
            Gets a <see cref="T:JohnsHope.FPlot.Library.Excel.DataReader"/> that reads from an Excel file stream. Used internally.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Reader(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Gets a <see cref="T:JohnsHope.FPlot.Library.Excel.DataReader"/> that reads from an Excel <see cref="T:System.IO.Stream"/>. The numbers are entered into the list row by row.
            In order to enable reading of Excel data, reference JohnsHope.FPlot.Excel.dll wich uses NativeExcel.dll.
            You can purchase NativeExcel.dll at <a href="http://www.nika-soft.com">www.nika-soft.com</a>
            </summary>
            <param name="stream">The Excel <see cref="T:System.IO.Stream"/>.</param>
            <param name="sheet">The Excel worksheet to read from. (1 for the first worksheet)</param>
            <param name="startRow">The row where the number data starts. (1 for the first row)</param>
            <param name="endRow">The row where the number data ends. (1 for the first row)</param>
            <param name="columns">The columns that contain the number data</param>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Reader(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.String[])">
            <summary>
            Gets a <see cref="T:JohnsHope.FPlot.Library.Excel.DataReader"/> that reads from an Excel <see cref="T:System.IO.Stream"/>. The numbers are entered into the list row by row.
            In order to enable reading of Excel data, reference JohnsHope.FPlot.Excel.dll wich uses NativeExcel.dll.
            You can purchase NativeExcel.dll at <a href="http://www.nika-soft.com">www.nika-soft.com</a>
            </summary>
            <param name="stream">The Excel <see cref="T:System.IO.Stream"/>.</param>
            <param name="sheet">The Excel worksheet to read from. (1 for the first worksheet)</param>
            <param name="startRow">The row where the number data starts. (1 for the first row)</param>
            <param name="endRow">The row where the number data ends. (1 for the first row)</param>
            <param name="columns">The columns that contain the number data</param>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Reader(System.IO.Stream,System.Int32,System.Int32,System.String[])">
            <summary>
            Gets a <see cref="T:JohnsHope.FPlot.Library.Excel.DataReader"/> that reads from an Excel <see cref="T:System.IO.Stream"/>. The numbers are entered into the list row by row.
            In order to enable reading of Excel data, reference JohnsHope.FPlot.Excel.dll wich uses NativeExcel.dll.
            You can purchase NativeExcel.dll at <a href="http://www.nika-soft.com">www.nika-soft.com</a>
            </summary>
            <param name="stream">The Excel <see cref="T:System.IO.Stream"/>.</param>
            <param name="sheet">The Excel worksheet to read from. (1 for the first worksheet)</param>
            <param name="startRow">The row where the number data starts. (1 for the first row)</param>
            <param name="columns">The columns that contain the number data</param>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Reader(System.IO.Stream,System.Int32,System.String[])">
            <summary>
            Gets a <see cref="T:JohnsHope.FPlot.Library.Excel.DataReader"/> that reads from an Excel <see cref="T:System.IO.Stream"/>. The numbers are entered into the list row by row.
            In order to enable reading of Excel data, reference JohnsHope.FPlot.Excel.dll wich uses NativeExcel.dll.
            You can purchase NativeExcel.dll at <a href="http://www.nika-soft.com">www.nika-soft.com</a>
            </summary>
            <param name="stream">The Excel <see cref="T:System.IO.Stream"/>.</param>
            <param name="startRow">The row where the number data starts. (1 for the first row)</param>
            <param name="columns">The columns that contain the number data</param>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Reader(System.IO.Stream,System.String[])">
            <summary>
            Gets a <see cref="T:JohnsHope.FPlot.Library.Excel.DataReader"/> that reads from an Excel <see cref="T:System.IO.Stream"/>. The numbers are entered into the list row by row.
            In order to enable reading of Excel data, reference JohnsHope.FPlot.Excel.dll wich uses NativeExcel.dll.
            You can purchase NativeExcel.dll at <a href="http://www.nika-soft.com">www.nika-soft.com</a>
            </summary>
            <param name="stream">The Excel <see cref="T:System.IO.Stream"/>.</param>
            <param name="columns">The columns that contain the number data</param>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Data(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Reads data from an Excel <see cref="T:System.IO.Stream"/>. The numbers are entered into the list row by row.
            In order to enable reading of Excel data, reference JohnsHope.FPlot.Excel.dll wich uses NativeExcel.dll.
            You can purchase NativeExcel.dll at <a href="http://www.nika-soft.com">www.nika-soft.com</a>
            </summary>
            <param name="stream">The Excel <see cref="T:System.IO.Stream"/>.</param>
            <param name="sheet">The Excel worksheet to read from. (1 for the first worksheet)</param>
            <param name="startRow">The row where the number data starts. (1 for the first row)</param>
            <param name="endRow">The row where the number data ends. (1 for the first row)</param>
            <param name="columns">The columns that contain the number data</param>
            <returns>Returns the numbers read in a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Data(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.String[])">
            <summary>
            Reads Data from an Excel <see cref="T:System.IO.Stream"/>. The numbers are entered into the list row by row.
            In order to enable reading of Excel data, reference JohnsHope.FPlot.Excel.dll wich uses NativeExcel.dll.
            You can purchase NativeExcel.dll at <a href="http://www.nika-soft.com">www.nika-soft.com</a>
            </summary>
            <param name="stream">The Excel <see cref="T:System.IO.Stream"/>.</param>
            <param name="sheet">The Excel worksheet to read from. (1 for the first worksheet)</param>
            <param name="startRow">The row where the number data starts. (1 for the first row)</param>
            <param name="endRow">The row where the number data ends. (1 for the first row)</param>
            <param name="columns">The columns that contain the number data</param>
            <returns>Returns the numbers read in a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Data(System.IO.Stream,System.Int32,System.Int32,System.String[])">
            <summary>
            Reads Data from an Excel <see cref="T:System.IO.Stream"/>. The numbers are entered into the list row by row.
            In order to enable reading of Excel data, reference JohnsHope.FPlot.Excel.dll wich uses NativeExcel.dll.
            You can purchase NativeExcel.dll at <a href="http://www.nika-soft.com">www.nika-soft.com</a>
            </summary>
            <param name="stream">The Excel <see cref="T:System.IO.Stream"/>.</param>
            <param name="sheet">The Excel worksheet to read from. (1 for the first worksheet)</param>
            <param name="startRow">The row where the number data starts. (1 for the first row)</param>
            <param name="columns">The columns that contain the number data</param>
            <returns>Returns the numbers read in a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Data(System.IO.Stream,System.Int32,System.String[])">
            <summary>
            Reads Data from an Excel <see cref="T:System.IO.Stream"/>. The numbers are entered into the list row by row.
            In order to enable reading of Excel data, reference JohnsHope.FPlot.Excel.dll wich uses NativeExcel.dll.
            You can purchase NativeExcel.dll at <a href="http://www.nika-soft.com">www.nika-soft.com</a>
            </summary>
            <param name="stream">The Excel <see cref="T:System.IO.Stream"/>.</param>
            <param name="startRow">The row where the number data starts. (1 for the first row)</param>
            <param name="columns">The columns that contain the number data</param>
            <returns>Returns the numbers read in a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Excel.Data(System.IO.Stream,System.String[])">
            <summary>
            Reads Data from an Excel <see cref="T:System.IO.Stream"/>. The numbers are entered into the list row by row.
            In order to enable reading of Excel data, reference JohnsHope.FPlot.Excel.dll wich uses NativeExcel.dll.
            You can purchase NativeExcel.dll at <a href="http://www.nika-soft.com">www.nika-soft.com</a>
            </summary>
            <param name="stream">The Excel <see cref="T:System.IO.Stream"/>.</param>
            <param name="columns">The columns that contain the number data</param>
            <returns>Returns the numbers read in a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.</returns>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Fit">
            <summary>
            A class that encapsulates fit algorithms for fitting <see cref="T:JohnsHope.FPlot.Library.Function1DItem"/>s to <see cref="T:JohnsHope.FPlot.Library.DataItem"/>s.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Fit.FitAlgorithm">
            <summary>
            Describes different Fit algorihtms
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Fit.FitAlgorithm.Marquardt">
            <summary>
            Describes a Marquardt fit algorithm.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Fit.FitAlgorithm.NelderMead">
            <summary>
            Describes a fit algorithm after Nelder &amp; Mead.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Fit.StepEventHandler">
            <summary>
            An event handler that is called after each step of the fit algorithm.
            </summary>
            <param name="fit">A reference to the corresponding <see cref="T:JohnsHope.FPlot.Library.Fit"/> object.</param>
        </member>
        <member name="E:JohnsHope.FPlot.Library.Fit.Step">
            <summary>
            The step event, that is fired after each step of the fit algorithm. Note that if you started fitting through
            the routine <see cref="M:JohnsHope.FPlot.Library.Fit.BeginSolve(System.AsyncCallback,System.Object)"/> the Step handler is called by that <see cref="T:System.Threading.Thread">Thread</see>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Fit.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Fit.#ctor(JohnsHope.FPlot.Library.DataItem,JohnsHope.FPlot.Library.Function1DItem)">
            <summary>
            Constructor that initializes Fit with the given <see cref="T:JohnsHope.FPlot.Library.DataItem"/> and fit function.
            The fit is initialized to the <see cref="T:JohnsHope.FPlot.Library.Fit.FitAlgorithm">Marquardt algorithm</see>.
            </summary>
            <param name="data">The <see cref="T:JohnsHope.FPlot.Library.DataItem"/> that contains the fit data.</param>
            <param name="f">The function to fit.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Fit.#ctor(JohnsHope.FPlot.Library.DataItem,JohnsHope.FPlot.Library.Function1DItem,System.Boolean[])">
            <summary>
            Constructor that initializes Fit with the given <see cref="T:JohnsHope.FPlot.Library.DataItem"/> and fit function and a boolean array of parameters
            to fit for. The fit is initialized to the <see cref="T:JohnsHope.FPlot.Library.Fit.FitAlgorithm">Marquardt algorithm</see>.
            </summary>
            <param name="data">The <see cref="T:JohnsHope.FPlot.Library.DataItem"/> that contains the fit data.</param>
            <param name="f">The function to fit.</param>
            <param name="fitp">A boolean array denoting the parameters to fit for.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Fit.#ctor(JohnsHope.FPlot.Library.DataItem,JohnsHope.FPlot.Library.Function1DItem,JohnsHope.FPlot.Library.Fit.FitAlgorithm)">
            <summary>
            Constructor that initializes Fit with the given <see cref="T:JohnsHope.FPlot.Library.DataItem"/> and fit function and a fitting algorithm.
            </summary>
            <param name="data">The <see cref="T:JohnsHope.FPlot.Library.DataItem"/> that contains the fit data.</param>
            <param name="f">The function to fit.</param>
            <param name="algorithm">The fit algorithm to use.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Fit.#ctor(JohnsHope.FPlot.Library.DataItem,JohnsHope.FPlot.Library.Function1DItem,System.Boolean[],JohnsHope.FPlot.Library.Fit.FitAlgorithm)">
            <summary>
            Constructor that initializes Fit with the given <see cref="T:JohnsHope.FPlot.Library.DataItem"/> and fit function, a boolean array of parameters
            to fit for and a fitting algorithm.
            </summary>
            <param name="data">The <see cref="T:JohnsHope.FPlot.Library.DataItem"/> that contains the fit data.</param>
            <param name="f">The function to fit.</param>
            <param name="fitp">A boolean array denoting the parameters to fit for.</param>
            <param name="algorithm">The fit algorithm to use.</param>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Fit.Never">
            <summary>
            A constant that can be assigned to <see cref="P:JohnsHope.FPlot.Library.Fit.StepInterval" /> so the Step event will never be fired, and the algorithm will
            not be interrupted.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.StepInterval">
            <summary>
            Denotes the minimal time delay between to invocations of the Step event in milliseconds. The default value is 250.
            If you assign Never, the Step event is never raised.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Fit.OnStep">
            <summary>
            This routine fires the <see cref="E:JohnsHope.FPlot.Library.Fit.Step"/> event, at a minimal time interval of <see cref="P:JohnsHope.FPlot.Library.Fit.StepInterval"/> during fitting.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.ChiSquare">
            <summary>
            The ChiSquare of the fit. This property is read-only.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.Q">
            <summary>
            The goodness-of-fit value Q = gammq(0.5*(N-M),0.5*chisquare), that indicates the probability of the fit.
            This value is read-only.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.CovarianceMatrix">
            <summary>
            This property contains the covariance matrix of the fit. This value is read-only. This property is only valid if the fit
            terminated regularly without exception, or if not, <see cref="M:JohnsHope.FPlot.Library.Fit.EvalCovarianceMatrix"/> has been called.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Fit.EvalCovarianceMatrix">
            <summary>
            Calculates the covariance matrix if the fit did not terminate regularly.
            </summary>
            <returns>Returns the covariance matrix or null if there was an exception</returns>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.Function">
            <summary>
            Sets or gets the function to fit.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.Fitp">
            <summary>
            Sets the function parameters to fit for of the fit-function.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.Errors">
            <summary>
            Returns the errors of the fit parameters, if the fit terminated regularly or if <see cref="M:JohnsHope.FPlot.Library.Fit.EvalCovarianceMatrix"/> has
            been called, otherwise returns a NaN array.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.Data">
            <summary>
            Sets or gets the <see cref="T:JohnsHope.FPlot.Library.DataItem"/> with the fit-data.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.NEval">
            <summary>
            Gets the number of function evaluations.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.Algorithm">
            <summary>
            Determines the <see cref="T:JohnsHope.FPlot.Library.Fit.FitAlgorithm">algorithm used for fitting</see>, either Marquartd or NelderMead.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.Exception">
            <summary>
            The <see cref="T:System.Exception">Exception</see> that occured during fitting, or null if there was no exception.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.Error">
            <summary>
            Is true if there were errors during the fit.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Fit.Solve">
            <summary>
            Finds the solution of the fitting problem. This method runs on the current thread and blocks the thread until the
            solution is found or an error occurs. In contrast, the method <see cref="M:JohnsHope.FPlot.Library.Fit.BeginSolve(System.AsyncCallback,System.Object)"/> runs on a separate thread and does
            not block.
            </summary>
            <exception cref="P:JohnsHope.FPlot.Library.Fit.Exception">May throw exceptions if the fitting algorithm encounters singularities etc.</exception>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Fit.BeginSolve(System.AsyncCallback,System.Object)">
            <summary>
            Starts fitting on a separate <see cref="T:System.Threading.Thread">Thread</see>. You can wait for the fitting threads termination by calling
            <see cref="M:JohnsHope.FPlot.Library.Fit.EndSolve(System.IAsyncResult)"/>.
            In contrast, the mehtod <see cref="M:JohnsHope.FPlot.Library.Fit.Solve"/> runs on the current thread and blocks the current thread until the solution is
            found or an error occurs.
            </summary>
            <param name="callback">A method that is called when the fitting is finished.</param>
            <param name="state"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Fit.EndSolve(System.IAsyncResult)">
            <summary>
            Blocks until fitting is finished.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.Thread">
            <summary>
            Returns the <see cref="T:System.Threading.Thread">Thread</see> the fitting runs on, when fitting was started with <see cref="M:JohnsHope.FPlot.Library.Fit.BeginSolve(System.AsyncCallback,System.Object)"/>, or null when
            fitting was started synchronously with <see cref="M:JohnsHope.FPlot.Library.Fit.Solve"/>, or if fitting runs in the <see cref="T:System.Threading.ThreadPool"/> and not on
            its own <see cref="T:System.Threading.Thread">Thread</see>, or if fitting has finished.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.UseThreadPool">
            <summary>
            If set to true, the asynchronous fitting algorithm will use a <see cref="T:System.Threading.ThreadPool"/> thread instead of its own thread.
            This is faster, but you cannot access the thread via the <see cref="P:JohnsHope.FPlot.Library.Fit.Thread"/> property and you cannot abort the threat via the method Abort.
            The default setting of this property is true.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Fit.Abort">
            <summary>
            Aborts the execution of the fitting thread.
            </summary>
            <returns>True if the thread was successfully aborted, false if there was no fitting thread running or if fitting
            could not be aborted.</returns>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.EnableUndo">
            <summary>
            If this property is set to false, no undo information is stored. It is set to true by default.
            You need to turn off undo only if you want to save memory or want to speed up fitting initialization by a small amount.
            (This is only necessary if you fit thousands of parameters, because the covariance matrix's size if of the order of the
            square of the number of fit parameters.)
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Fit.Undo">
            <summary>
            Restores the Fit's state one <see cref="M:JohnsHope.FPlot.Library.Fit.Solve"/> call back.
            </summary>
            <returns>Returns true if the undo stack was not empty.</returns>
            <exception cref="P:JohnsHope.FPlot.Library.Fit.Exception">Throws an Exception if the number of parameters in the function has changed.</exception>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Fit.Redo">
            <summary>
            Redo the action that was previously reverted by <see cref="M:JohnsHope.FPlot.Library.Fit.Undo"/>.
            </summary>
            <returns>Returns true if the redo stack was not empty.</returns>
            <exception cref="P:JohnsHope.FPlot.Library.Fit.Exception">Throws an Exception if the number of parameters in the function has changed.</exception>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.CanUndo">
            <summary>
            Returns true if there is a step that can be undone.
            </summary> 
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.CanRedo">
            <summary>
            Return true if there is a step that can be redone.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Fit.DerivFunction">
            <summary>
            Generates a <see cref="T:JohnsHope.FPlot.Library.Function1DItem"/> object that automatically calculates the derivative information (the array dfdp)
            of the supplied function numerically.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Fit.DerivFunction.fast">
            <summary>
            If fast is set to false, a more accurate but slower derivative computation is done.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Fit.DerivFunction.f(System.Double)">
            <summary>
            The calculating function.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Fit.DerivFunction.#ctor(JohnsHope.FPlot.Library.Function1DItem)">
            <summary>
            The constructor.
            </summary>
            <param name="f">The base function to calculate the derivatives of.</param>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.AsyncState">
            <summary>
            The <see cref="P:System.IAsyncResult.AsyncState"/> object, representing the state of the asynchronous operation.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.AsyncWaitHandle">
            <summary>
            A <see cref="T:System.Threading.WaitHandle"/> that can be used to wait for the fitting to finish, by calling AsyncWaitHandle.<see cref="M:System.Threading.WaitHandle.WaitOne"/>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.CompletedSynchronously">
            <summary>
            Return true if the fitting was done synchronously (by the method <see cref="M:JohnsHope.FPlot.Library.Fit.Solve"/>) and fitting is done.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Fit.IsCompleted">
            <summary>
            Returns true if the fitting is done.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Parser">
            <summary>
            A class that implements basic parsing of C# texts.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Parser.Lines(System.String)">
            <summary>
            Counts the number of lines in the passed code.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Parser.RemoveComments(System.String)">
            <summary>
            Removes comments from the passed code.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Parser.Namespace(System.String)">
            <summary>
            Returns the main namespace of the code.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Parser.SortUsingHeader(System.String)">
            <summary>
            Reformats the passed code, sorting the using directives at the top and removing duplicate using directives.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.DataItemSerializer">
            <summary>
            A class used internally for backwards compatibility to older versions of FPlot.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.length">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.Source">
            <summary>
            A C# source string that specfies source code used to load the DataItem from a Stream.
            </summary>
            <remarks>
            The source
            is of the following form:
            <code>
            double[] x, y, z, dx, dy, dz;
            void OnLoad(Stream stream) {
              "loadsource";
            }
            </code>
            <example>
            An example code to load text data would be:
            <code>
            IList&lt;double&gt; d = Text.Data(stream, "; \n");
            int n = 0;
            while (n &lt; d.Count) {
              x[n/4] = d[n++];
              y[n/4] = d[n++];
              dx[n/4] = d[n++];
              dy[n/4] = d[n++];
            }
            </code>
            or for binary data of type ushort:
            <code>
            IList&lt;double&gt; d = Binary.Data(stream, typeof(ushort), false);
            ...
            </code>
            The code can assing the x, y, z, dx, dy and dz arrays and their size will be adjusted automatically.
            </example>
            </remarks>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.x">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.y">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.z">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.dx">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.dy">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.dz">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.dim">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.err">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.Lines">
            <summary>
            If true, points are joined by a line.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.Marks">
            <summary>
            If true, for each point a error mark is drawn.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.FillArea">
            <summary>
            If set to true, the area below the points will be filled with <see cref="F:JohnsHope.FPlot.Library.DataItemSerializer.FillColor">FillColor</see>. This functionality is not yet implemented.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.FillColor">
            <summary>
            The color with which the area below the point will be filled. This functionality is not yet implemented.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.color">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.lineWidth">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.DataItemSerializer.lineStyle">
            <summary>
            Used internally.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.DataItemSerializer.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.EmbeddedAssembly">
            <summary>
            A <see cref="T:JohnsHope.FPlot.Library.Item"/> class that represents an assembly that will be referenced by the <see cref="T:JohnsHope.FPlot.Library.Compiler"/> and will be embedded into the *.fplot file so the file is portable even if the assembly is
            missing on the computer where the file is opened.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.EmbeddedAssembly.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.EmbeddedAssembly.#ctor(System.String)">
            <summary>
            A constructor that takes an assembly filename as an argument
            </summary>
            <param name="dll">The full filename of the assembly.</param>
            <exception cref="T:System.ArgumentException">Throws an Exception if the passed assembly filename is not valid or if the assembly file does not exist.</exception>
        </member>
        <member name="M:JohnsHope.FPlot.Library.EmbeddedAssembly.OnAddedToList(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Adds the assembly to the <see cref="F:JohnsHope.FPlot.Library.CompilerOptions.PackagedImports"/> collection if it is not yet contaied in an <see cref="T:JohnsHope.FPlot.Library.ItemList"/>.
            </summary>
            <param name="List">The <see cref="T:JohnsHope.FPlot.Library.ItemList"/> the <see cref="T:JohnsHope.FPlot.Library.Item"/> was added to.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.EmbeddedAssembly.OnRemovedFromList(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Removes the assembly from the <see cref="F:JohnsHope.FPlot.Library.CompilerOptions.PackagedImports"/> collection if it is not contained in any <see cref="T:JohnsHope.FPlot.Library.ItemList"/> anymore.
            </summary>
            <param name="List">The <see cref="T:JohnsHope.FPlot.Library.ItemList"/> the <see cref="T:JohnsHope.FPlot.Library.Item"/> was removed from.</param>
        </member>
        <member name="P:JohnsHope.FPlot.Library.EmbeddedAssembly.Assembly">
            <summary>
            Gets or sets the full path to the embedded assembly.
            </summary>
            <exception cref="T:System.ArgumentException">Throws an Exception if the passed string is not a valid filename or if the assembly file does not exist.</exception>
        </member>
        <member name="M:JohnsHope.FPlot.Library.EmbeddedAssembly.GetSource">
            <summary>
            Always returns null, since this <see cref="T:JohnsHope.FPlot.Library.Item"/> type needs not to be compiled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.EmbeddedAssembly.TypeName">
            <summary>
            Returns a short name for this <see cref="T:JohnsHope.FPlot.Library.Item"/> type.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.StringWriter">
            <summary>
            A StringWriter class that implements indenting.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.StringWriter.Ident">
            <summary>
            The number of tabs to indent each line with.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.StringWriter.Write(System.Char)">
            <summary>
            Writes a character to the StringWriter.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.StringWriter.Write(System.String)">
            <summary>
            Writes a string to the StringWriter.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.StringWriter.WriteLine(System.Char)">
            <summary>
            Writes a character and a new line to the StringWriter.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.StringWriter.WriteLine(System.String)">
            <summary>
            Writes a line to the StringWriter.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.GraphicsBase">
            <summary>
            A class that implements basic graphics objects like <see cref="T:JohnsHope.FPlot.Library.GraphicsBase.Point">Point</see> and
            <see cref="T:JohnsHope.FPlot.Library.GraphicsBase.Matrix">Matrix</see>.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.GraphicsBase.Border">
            <summary>
            A constant that defines the white-space border of the control.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.GraphicsBase.Point">
            <summary>
            A struct that denotes a two- or threedimensional point in world coordinates.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.GraphicsBase.Point.x">
            <summary>
            The x coordinate of the Point.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.GraphicsBase.Point.y">
            <summary>
            The y coordinate of the Point.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.GraphicsBase.Point.z">
            <summary>
            The z coordinate of the Point.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GraphicsBase.Point.ToString">
            <summary>
            Returns a string representation of the Point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GraphicsBase.Point.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a 2D Point
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GraphicsBase.Point.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a 3D Point
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.GraphicsBase.Matrix">
            <summary>
            A class that denotes a square matrix used to transform Points.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.GraphicsBase.Matrix.Elements">
            <summary>
            A two dimensional array containing the fields of the matrix. 
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.GraphicsBase.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets an individual field of the matrix.
            </summary>
            <param name="row">The row of the field</param>
            <param name="column">The column of the field</param>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GraphicsBase.Matrix.Reset">
            <summary>
            Resets the matrix to the identity matrix.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.GraphicsBase.Matrix.N">
            <summary>
            Gets or sets the dimensionality of the matrix. If the dimensionality is changed the matrix is reset to the identity matrix.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GraphicsBase.Matrix.#ctor(System.Int32)">
            <summary>
            Creates a new Matrix of size NxN.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GraphicsBase.Matrix.#ctor(System.Double[0:,0:])">
            <summary>
            Creates a new Matrix with the supplied Elements.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GraphicsBase.Matrix.ToString">
            <summary>
            Returns a string representation of the matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GraphicsBase.Matrix.CopyFrom(JohnsHope.FPlot.Library.GraphicsBase.Matrix)">
            <summary>
            Copies from another Matrix.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GraphicsBase.Matrix.Clone">
            <summary>
            Creates a copy of the Matrix
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GraphicsBase.Matrix.Multiply(JohnsHope.FPlot.Library.GraphicsBase.Matrix)">
            <summary>
            Multiplies the Matrix with the matrix A
            </summary>
            <param name="A"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GraphicsBase.Matrix.Multiply(JohnsHope.FPlot.Library.GraphicsBase.Matrix,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Multiplies the Matrix with the Matrix A
            </summary>
            <param name="A">The Matrix to multiply with</param>
            <param name="order">The MatirxOrder specifying the order in which to multiply the matrices.
            MatrixOrder.Prepend corresponds to this*A and MatrixOrder.Append to A*this</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GraphicsBase.Matrix.op_Multiply(JohnsHope.FPlot.Library.GraphicsBase.Matrix,JohnsHope.FPlot.Library.GraphicsBase.Matrix)">
            <summary>
            Matrix multiplication.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GraphicsBase.Matrix.Invert">
            <summary>
            Inverts the Matrix.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GraphicsBase.Matrix.TransformPoint(JohnsHope.FPlot.Library.GraphicsBase.Point@)">
            <summary>
             Transforms the Point p
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GraphicsBase.Matrix.TransformPoints(JohnsHope.FPlot.Library.GraphicsBase.Point[])">
            <summary>
            Transforms all Points in p.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GraphicsBase.DrawLegend(System.Drawing.Graphics,JohnsHope.FPlot.Library.Plot)">
            <summary>
            Draws a Legend
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> to paint to</param>
            <param name="plot">The <see cref="T:JohnsHope.FPlot.Library.Plot"/> for which to paint a legend</param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Graphics3D">
            <summary>
            A class that implements 3D objects like 3D <see cref="T:JohnsHope.FPlot.Library.Graphics3D.Matrix">Matrix</see> and 
            <see cref="T:JohnsHope.FPlot.Library.Graphics3D.View">View</see>.
            This class is currently in alpha version stage.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Graphics3D.Matrix">
            <summary>
            A class derived from <see cref="T:JohnsHope.FPlot.Library.GraphicsBase.Matrix"/>. Implements a special method <see cref="M:JohnsHope.FPlot.Library.Graphics3D.Matrix.Reset(JohnsHope.FPlot.Library.PlotModel,JohnsHope.FPlot.Library.GraphicsBase.Point)"/> that can be
            used to intialize the matrix with a <see cref="T:JohnsHope.FPlot.Library.PlotModel"/> to scale the Plot area to the cube from (-1, -1, -1) to (1, 1, 1) and a
            given rotational angle.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics3D.Matrix.Reset(JohnsHope.FPlot.Library.PlotModel,JohnsHope.FPlot.Library.GraphicsBase.Point)">
            <summary>
            Resets the Matrix3D so that the bounds of the <see cref="T:JohnsHope.FPlot.Library.PlotModel"/> are scaled to the cube from (-1, -1, -1) to
            (1, 1, 1), and turned by the angles specified in Angle.
            </summary>
            <param name="Model">The <see cref="T:JohnsHope.FPlot.Library.PlotModel"/> to fit into the (-1, -1, -1)-(1, 1, 1) cube</param>
            <param name="Angle">The viewing angle</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics3D.Matrix.#ctor">
            <summary>
            Initializes the matrix to the identity 4x4 matrix.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics3D.Matrix.Clone">
            <summary>
            Creates a copy of the Matrix
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Graphics3D.View">
            <summary>
            This class describes the view properties of a 3D Plot. 
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Graphics3D.View.Screen">
            <summary>
            The position of the screen. The screen position is then (0, Screen, 0).
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Graphics3D.View.Eye">
            <summary>
            The position of the eye. The eye position is then (0, Eye, 0).
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Graphics3D.View.Perspective">
            <summary>
            If true the Plot is drawn with perspective, if false, the Plot is drawn with parallelogramm mode.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics3D.View.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics3D.View.CopyFrom(JohnsHope.FPlot.Library.Graphics3D.View)">
            <summary>
            Copies from another View.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics3D.View.Clone">
            <summary>
            Creates copy of the View.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Graphics3D.View.Model">
            <summary>
            The <see cref="T:JohnsHope.FPlot.Library.PlotModel"/> the View belongs to.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Graphics3D.View.AngleX">
            <summary>
            The rotation angle aroung the x axis.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Graphics3D.View.AngleY">
            <summary>
            The rotation angle aroung the y axis.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Graphics3D.View.AngleZ">
            <summary>
            The rotation angle aroung the z axis.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics3D.View.DeviceCoordinates(JohnsHope.FPlot.Library.GraphicsBase.Point[],System.Drawing.PointF[])">
            <summary>
            Transforms the world coordinates to device coordinates.
            </summary>
            <param name="world">An array of world coordinates</param>
            <param name="device">An array of the resulting device coordinates. This array must be of the
            same length as world.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics3D.View.DeviceCoordinate(JohnsHope.FPlot.Library.GraphicsBase.Point)">
            <summary>
            Transforms the given world coordinate into a device coordinate.
            </summary>
            <returns>Returns the corresponding device coordinate.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics3D.View.WorldSize(System.Single,JohnsHope.FPlot.Library.GraphicsBase.Point)">
            <summary>
            Returns the world-length of the supplied device length at the specified point.
            </summary>
            <param name="length">The length in device coordinates</param>
            <param name="location">The point at which the lenght is measured</param>
            <returns>Returns the length in world coordinates.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics3D.View.BoundsCube">
            <summary>
            Returns the edges of a cube that has the size of the <see cref="T:JohnsHope.FPlot.Library.PlotModel"/>'s bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics3D.View.ResetBounds">
            <summary>
            Resets the Bounds of the View to an indeterminated value.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics3D.View.Bounds(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            Returns a rectangle with the device coordinate bounds of the <see cref="T:JohnsHope.FPlot.Library.PlotModel"/>'s bounds.
            </summary>
            <param name="Model"></param>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics3D.View.SetBounds(JohnsHope.FPlot.Library.PlotModel,System.Drawing.Rectangle)">
            <summary>
            Sets the View parameters so that the <see cref="T:JohnsHope.FPlot.Library.PlotModel"/>'s bounds world coordinates transform to device
            coordinates will fit in to the <see cref="T:System.Drawing.Rectangle"/> bounds.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Plot">
            <summary>
            This class supports generic behavior of a plot.
            </summary>
            <summary>
            A class that supports generic behavior of a Plot.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.OnMouseDown(JohnsHope.FPlot.Library.Plot.MouseEventArgs)">
            <summary>
            Reacts on Control.OnMouseDown events
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.OnMouseMove(JohnsHope.FPlot.Library.Plot.MouseEventArgs)">
            <summary>
            Reacts on Control.OnMouseMove events
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.OnMouseUp(JohnsHope.FPlot.Library.Plot.MouseEventArgs)">
            <summary>
            Reacts on Control.OnMouseUp events
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.OnMouseWheel(JohnsHope.FPlot.Library.Plot.MouseEventArgs)">
            <summary>
            Reacts on Control.OnMouseWheel events
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.OnResize(System.EventArgs)">
            <summary>
            Reacts on resizing of the control.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Plot.NotifyCursorHandler">
            <summary>
            This delegate is a function that is called upon mouse cursor moves inside the PlotControl
            </summary>
        </member>
        <member name="E:JohnsHope.FPlot.Library.Plot.NotifyCursor">
            <summary>
            This event notifies about mouse cursor moves inside the PlotControl
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.FireNotifyCursor(System.Double,System.Double,System.Double)">
            <summary>
            Fires the NotifyCursor event
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.DrawToImage(System.Drawing.Rectangle,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Draws the Plot to a Bitmap of size bounds and with PixelFormat pfmt.
            </summary>
            <param name="bounds">The size of the Bitmap</param>
            <param name="pfmt">The PixelFormat of the Bitmap</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.DrawToImage(System.Drawing.Rectangle)">
            <summary>
            Draw the Plot to a Bitmap of size bounds and with PixelFormat.Format24bppRgb.
            </summary>
            <param name="bounds">The size of the Bitmap</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.SaveAsImage(System.String,System.Drawing.Rectangle,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves the Plot into an image file.
            </summary>
            <param name="filename">The filename where to store the file</param>
            <param name="bounds">The bounds of the image</param>
            <param name="format">The image format used to save the image</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.SaveAsMetafile(System.Drawing.Graphics,System.String,System.Drawing.Rectangle)">
            <summary>
            Saves the Plot into a metafile. The Graphics object that is passed must have a valid HDC value,
            retrieved by g.GetHdc().
            </summary>
            <param name="g">A Graphics object with a valid HDC value (retrieved by g.GetHdc)</param>
            <param name="filename">The filename where to store the file</param>
            <param name="bounds">The bounds of the image</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.GetImageFormat(System.String)">
            <summary>
            Returns an ImageFormat accoring to the file extension of the supplied filename.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.SaveAsImage(System.String,System.Drawing.Rectangle)">
            <summary>
            Saves the Plot into a bitmap file. The ImageFormat is choosen according to the supplied filename.
            </summary>
            <param name="filename">The filename</param>
            <param name="bounds">The bounds of the image</param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Plot.Type">
            <summary>
            The possible types of plots.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Plot.Type.Plot2D">
            <summary>
            Denotes a two dimensional plot.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Plot.Type.Plot3DGrid">
            <summary>
            Denotes a three dimesional plot with grid lines.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Plot.Type.Plot3DSurface">
            <summary>
            Denotes a three dimensional plot with surface shading.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Plot.MouseEventArgs">
            <summary>
            A class that derives from System.Windows.Forms.MouseEventArgs and also contains the state of the modifier keys.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Plot.MouseEventArgs.ModifierKeys">
            <summary>
            The modifier keys during the mouse event.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.MouseEventArgs.#ctor(System.Windows.Forms.MouseEventArgs)">
            <summary>
            A constructor that takes a System.Windows.Forms.MouseEventArgs to initialize the class.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.MouseEventArgs.#ctor(System.Windows.Forms.MouseEventArgs,System.Windows.Forms.Keys)">
            <summary>
            Initializes the class with the given MouseEventArgs and modifier keys.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.#ctor(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            The contructor for a Plot object. Do not use this constructor, use the static method Plot.New instead.
            Plot.New returns the right Plot type according to the Model.type property.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Plot.PaintThread">
            <summary>
            The thread that paints the plot's items.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.Dispose">
            <summary>
            Stops the Painter thread.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.New(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            Returns a new Plot object for the supplied PlotModel, according to Model.type.
            </summary>
            <param name="Model">The PlotModel</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.CopyFrom(JohnsHope.FPlot.Library.Plot)">
            <summary>
            Copies from another Plot
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.Clone">
            <summary>
            Returns a clone of the Plot.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Plot.PlotType">
            <summary>
            Returns the <see cref="P:JohnsHope.FPlot.Library.Plot.PlotType"/> of the Plot
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.Crop(JohnsHope.FPlot.Library.Norms,System.Drawing.Rectangle)">
            <summary>
            Crops the display area of the Plot according to norms and bounds. If the max/min value of the norms lies outside the
            bounds, the bounds are adjusted accordingly.
            </summary>
            <returns>Returns true if the Plot was cropped, i.e. the max/min value of the norms was outside the
            Plot.Bounds.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the Plot
            </summary>
            <param name="g">The Graphics object to paint to.</param>
            <param name="bounds">The bounds of the Plot</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot.SetRange(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the plot range
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Plot3D">
            <summary>
            Plots 3D plots
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot3D.#ctor(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            Constructs a new Plot2D.
            </summary>
            <param name="Model">The PlotModel of the Plot2D</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot3D.CopyFrom(JohnsHope.FPlot.Library.Plot3D)">
            <summary>
            Copies from another Plot2D object
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot3D.Clone">
            <summary>
            Clones the Plot2D object
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot3D.MovePlot(System.Int32,System.Int32)">
            <summary>
            Moves the displayed range in the plotting area by the specified amount of pixels.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot3D.Crop(JohnsHope.FPlot.Library.Norms,System.Drawing.Rectangle)">
            <summary>
            Crops the Ploting area according to the extensions of the plot described by norms
            </summary>
            <param name="norms">The extensions of the plot</param>
            <param name="bounds">The bounds of the painting area</param>
            <returns>Returns true, if the plotting area was cropped</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot3D.Grow(JohnsHope.FPlot.Library.Norms,System.Drawing.Rectangle)">
            <summary>
            Increases the size of the plot area until its bounds fit into bounds.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot3D.Measure(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Calculates the bounds of the plotting area inside the control.
            </summary>
            <param name="g">A Graphics object.</param>
            <param name="bounds">The bounds of the entire control.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot3D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the control.
            </summary>
            <param name="g">The Graphics object to paint to.</param>
            <param name="bounds">The bounds of the plotting area.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot3D.OnResize(System.EventArgs)">
            <summary>
            Resizes the control.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot3D.OnMouseDown(JohnsHope.FPlot.Library.Plot.MouseEventArgs)">
            <summary>
            Is called when a mouse button is pressed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot3D.OnMouseMove(JohnsHope.FPlot.Library.Plot.MouseEventArgs)">
            <summary>
            Is called when the mouse moves over the control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot3D.GetX(System.Int32)">
            <summary>
            Gets the x-coordinate of the speified x-value of a pixel in the plotting area.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot3D.GetY(System.Int32)">
            <summary>
            Gets the y-coordinate of the speified y-value of a pixel in the plotting area.
            </summary>		
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot3D.OnMouseUp(JohnsHope.FPlot.Library.Plot.MouseEventArgs)">
            <summary>
            Is called when a mouse-button is released.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot3D.OnMouseWheel(JohnsHope.FPlot.Library.Plot.MouseEventArgs)">
            <summary>
            Is called when the mouse-wheel is moved.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.IItemEventHandler">
            <summary>
            Describes an object that supports the specified notifications of Item changes
            in an <see cref="T:JohnsHope.FPlot.Library.ItemList">ItemList</see>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.IItemEventHandler.HandleUpdate(JohnsHope.FPlot.Library.Item)">
            <summary>
            The Item x has changed.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.IItemEventHandler.HandleRemove(JohnsHope.FPlot.Library.Item)">
            <summary>
            The Item x has been deleted.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.IItemEventHandler.HandleAdd(JohnsHope.FPlot.Library.Item)">
            <summary>
            The Item x was added.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.IItemEventHandler.HandleReplace(JohnsHope.FPlot.Library.Item,JohnsHope.FPlot.Library.Item)">
            <summary>
            Replace the Item oldItem with Item newItem.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.IItemEventHandler.HandleReorder(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            The order of the Items has changed
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.IItemEventHandler.HandleInvalidate">
            <summary>
            Called when an arbitrary Model change has occured. All Items that have been modified have their Modified field set to true.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.ItemEventHandlerList">
            <summary>
            Represents a list of <see cref="T:JohnsHope.FPlot.Library.WeakReference`1"/>'s to <see cref="T:JohnsHope.FPlot.Library.IItemEventHandler"/>s.
            New handlers can be added to the list with
            the += operator similar to events. Upon Serialization, all handlers that are Serializable are also serialized.
            If a handler is reclaimed by the garbage collector, it is removed from the list.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemEventHandlerList.Enumerator.#ctor(System.Collections.Generic.List{JohnsHope.FPlot.Library.WeakReference{JohnsHope.FPlot.Library.IItemEventHandler}})">
            <summary>
            Initializes the Enumerator;
            </summary>
            <param name="Handlers"></param>
        </member>
        <member name="P:JohnsHope.FPlot.Library.ItemEventHandlerList.Enumerator.Current">
            <summary>
            Gets the current element
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemEventHandlerList.op_Addition(JohnsHope.FPlot.Library.ItemEventHandlerList,JohnsHope.FPlot.Library.IItemEventHandler)">
            <summary>
            Adds an <see cref="T:JohnsHope.FPlot.Library.IItemEventHandler"/> to the ItemEventHandlerList
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemEventHandlerList.op_Subtraction(JohnsHope.FPlot.Library.ItemEventHandlerList,JohnsHope.FPlot.Library.IItemEventHandler)">
            <summary>
            Removes an <see cref="T:JohnsHope.FPlot.Library.IItemEventHandler"/> from the ItemEventHandlerList
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemEventHandlerList.GetEnumerator">
            <summary>
            Returns an Enumerator for the ItemEventHandlerList
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemEventHandlerList.Update(JohnsHope.FPlot.Library.Item)">
            <summary>
            Calls the UpdateItem method of all registered IItemEventHandlers.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemEventHandlerList.Add(JohnsHope.FPlot.Library.Item)">
            <summary>
            Calls the AddItem method of all registered IItemEventHandlers.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemEventHandlerList.Remove(JohnsHope.FPlot.Library.Item)">
            <summary>
            Calls the RemoveItem method of all registered IItemEventHandlers.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemEventHandlerList.Replace(JohnsHope.FPlot.Library.Item,JohnsHope.FPlot.Library.Item)">
            <summary>
            Calls the ReplaceItem method of all registered IItemEventHandlers.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemEventHandlerList.Reorder(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Calls the ReorderItems method of all registered IItemEventHandlers.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemEventHandlerList.Invalidate">
            <summary>
            Calls the ReorderItems method of all registered IItemEventHandlers.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.IPlotForm">
            <summary>
            Describes a PlotForm that can be visible, has bounds and contains a <see cref="P:JohnsHope.FPlot.Library.IPlotForm.PlotModel"/>
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.IPlotForm.Bounds">
            <summary>
            Represents the bounds of a PlotFrom
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.IPlotForm.Visible">
            <summary>
            Indicates if the PlotForm is visible
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.IPlotForm.PlotModel">
            <summary>
            The <see cref="P:JohnsHope.FPlot.Library.IPlotForm.PlotModel"/> of the PlotForm
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.ItemsModel">
            <summary>
            Describes a Model for an <see cref="T:JohnsHope.FPlot.Library.ItemList"/>, that can be stored, loaded and combined with other <see cref="T:JohnsHope.FPlot.Library.ItemsModel"/>s.
            This class serves as a global central repository of <see cref="T:JohnsHope.FPlot.Library.Item">Items</see> and 
            <see cref="T:JohnsHope.FPlot.Library.ItemsModel.Plot">Plots</see>
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.ItemsModel.Plot">
            <summary>
            A class that describes a PlotForm
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.ItemsModel.Plot.Bounds">
            <summary>
            The bounds of the Plot
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.ItemsModel.Plot.PlotModel">
            <summary>
            The Model of the Plot
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.ItemsModel.Plot.New">
            <summary>
            If New == true, the Plot has no open PlotForm yet
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.Plot.#ctor(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            Initializes the Plot
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.Plot.#ctor(JohnsHope.FPlot.Library.IPlotForm)">
            <summary>
            Initializes the Plot
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.ItemsModel.Plot.Form">
            <summary>
            The IPlotForm corresponding to this Plot
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.Plot.Close">
            <summary>
            Closes the PlotForm of the Plot.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.ItemsModel.PlotList">
            <summary>
            A class that describes a List of Plots
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.PlotList.New(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            Adds a new Plot with the given PlotModel to the PlotList
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.ItemsModel.Plots">
            <summary>
            All Plots contained in the ItemsModel
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.SavePlots">
            <summary>
            Saves the information about open PlotForms in the ItemsModel.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.ItemsModel.OpenPlotFormHandler">
            <summary>
            A delegate that opens a PlotForm for a given Plot.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.OpenPlots(JohnsHope.FPlot.Library.ItemsModel.OpenPlotFormHandler)">
            <summary>
            Opens a PlotForm for each Plot in the ItemsModel with the delegate OpenPlotForm.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.ClosePlots">
            <summary>
            Closes all open Plots.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.ItemsModel.Filename">
            <summary>
            The Filename the ItemsModel is stored with.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.#ctor">
            <summary>
            The default constructor
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.#ctor(System.String)">
            <summary>
            Initializes the ItemsModel with the given filename
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.Combine(JohnsHope.FPlot.Library.ItemsModel)">
            <summary>
            Combines the current with the given ItemsModel.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.Separate(JohnsHope.FPlot.Library.IPlotForm)">
            <summary>
            Creates a ItemsModel that only contains the data needed for the given IPlotForm
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.Discard">
            <summary>
            Deletes all Items in the ItemsModel and closes all Plots.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.Save">
            <summary>
            Saves the ItemsModel
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.Save(System.String)">
            <summary>
            Saves the ItemsModel in the specified file
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.Save(System.IO.Stream)">
            <summary>
            Saves the ItemsModel in the specified Stream
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.Load(System.IO.Stream)">
            <summary>
            Loads a ItemsModel from the specified Stream
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.Load(System.String)">
            <summary>
            Loads a ItemsModel form the specified file
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.ItemsModel.RegisterPlotForm(JohnsHope.FPlot.Library.IPlotForm)">
            <summary>
            Registers an IPlotForm, so its contents will be stored along with the ItemsModel
            </summary>
            <param name="pf"></param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Norm">
            <summary>
            Describes the norms average, min and max
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Norm.Average">
            <summary>
            The average norm
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Norm.Min">
            <summary>
            The minimum norm
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Norm.Max">
            <summary>
            The maximum norm
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Norms">
            <summary>
            A class that computes a norm over a set of points. This class can be used to calculate the average, maximum and 
            minimum coordiantes of a set of points.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Norms.sum">
            <summary>
            The sum, min and max of the points in the norm (Further called the local norm.)
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Norms.min">
            <summary>
            The sum, min and max of the points in the norm (Further called the local norm.)
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Norms.max">
            <summary>
            The sum, min and max of the points in the norm (Further called the local norm.)
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Norms.sumT">
            <summary>
            The sum, min, and max of the points in T-space of the norm. (Further called the T-space norm.)
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Norms.minT">
            <summary>
            The sum, min, and max of the points in T-space of the norm. (Further called the T-space norm.)
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Norms.maxT">
            <summary>
            The sum, min, and max of the points in T-space of the norm. (Further called the T-space norm.)
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Norms.N">
            <summary>
            The number of points in the norm.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Norms.T">
            <summary>
            The transformation matrix used.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Norms.ResetLocal">
            <summary>
             Resets the local part of the norm, sum, avg, min and max, but not the T-space norm sumT, avgT, minT and maxT.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Norms.Reset">
            <summary>
            Resets the Norms
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Norms.#ctor(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Creates a new norm with the transformation T
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Norms.#ctor">
            <summary>
            creates a new norm with the identity transformation
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Norms.avg">
            <summary>
            Returns the average of the norm points.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Norms.avgT">
            <summary>
            Returns the average of the norm points in T-space.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Norms.Bounds">
            <summary>
            Returns the Bounds of the Norms, i.e. the RectangleF(min.X, min.Y, max.X-min.X, max.Y-min.Y).
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Norms.op_Addition(JohnsHope.FPlot.Library.Norms,JohnsHope.FPlot.Library.Norms)">
            <summary>
            Adds two norms together. The norms must have the same T transformation matrix.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Norms.Add(System.Drawing.PointF[])">
            <summary>
            Adds points to the norms.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Graphics2D">
            <summary>
            This class contains static routines to Draw specialized 2D objects
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics2D.Diff(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Calculates the difference between two points.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics2D.Angle(System.Drawing.PointF)">
            <summary>
            Calculates the angle of a vector from -180 to 180 degrees.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics2D.MovePoints(System.Drawing.PointF[]@,System.Single,JohnsHope.FPlot.Library.Norm,System.Single,JohnsHope.FPlot.Library.Norm)">
            <summary>
            This routine moves the points in p so that the average/min/max Y component is y and the
            average/min/max X component is x.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics2D.DrawText(System.Drawing.Graphics,System.String,System.Boolean,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Brush,System.Single,JohnsHope.FPlot.Library.Norm,System.Single,JohnsHope.FPlot.Library.Norm,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.Matrix,System.Drawing.PointF[]@,JohnsHope.FPlot.Library.Norms@)">
            <summary>
            Draws text. The supplied X/Y coordinates denote the average/min/max value of the points of the rectangle around the text,
            according to xnorm/ynorm. You can specify a rotation matrix, to draw the text at a certain angle. Also you can specify
            a transformation matrix T and its inverse Tinv to influence the drawing position of the text. Note that the matrix T only
            influences the position where the text will be drawn and not it's angle or shape.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> to draw to.</param>
            <param name="text">The text to draw</param>
            <param name="draw">If false, the text is not drawn but it's outline rectangle points are assigned to p and added to
            norms.</param>
            <param name="font">The font to use</param>
            <param name="brush">The brush used to draw the text</param>
            <param name="background">If background != null, the text background is filled with background</param>
            <param name="X">The avg/max/min x-coordinate of the text</param>
            <param name="xnorm">The norm to use for the x-coordinate (avg/min/max)</param>
            <param name="Y">The avg/max/min y-coordinate of the text</param>
            <param name="ynorm">The norm to use for the y-coordinate (avg/min/max)</param>
            <param name="Rotation">An additional rotation of the text</param>
            <param name="T">The default transformation used for drawing</param>
            <param name="Tinv">The inverse of T</param>
            <param name="p">Returns the edges of the text rectangle in T-space. You must pass a <see cref="T:System.Drawing.PointF"/> array of size 4</param>
            <param name="norms">The <see cref="T:JohnsHope.FPlot.Library.Norms"/>, the edges of the text will be added to.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics2D.DrawScale(System.Drawing.Graphics,System.Drawing.PointF[],JohnsHope.FPlot.Library.PlotModel,JohnsHope.FPlot.Library.Scale,System.Boolean,JohnsHope.FPlot.Library.Norms@)">
            <summary>
            Draws a <see cref="T:JohnsHope.FPlot.Library.Scale">Scale</see>. The point-array v is an array of 3 points that denote the orientation
            of the scale. The primary scale is drawn from v[0] -> v[1], the opposite scale is drawn from 
            v[0] + v[2] -> v[1] + v[2]. 
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object to draw to.</param>
            <param name="v">The orientation of the scale</param>
            <param name="Model">The <see cref="T:JohnsHope.FPlot.Library.PlotModel"/> of the Plot to draw</param>
            <param name="scale">The scale to draw</param>
            <param name="draw">If false, the scale is not drawn but it's dimensions are added to norms.</param>
            <param name="norms">The <see cref="T:JohnsHope.FPlot.Library.Norms"/> the extension-points of the scale will be added to.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Graphics2D.DrawZScale(System.Drawing.Graphics,JohnsHope.FPlot.Library.PlotModel,System.Drawing.PointF[]@,System.Boolean,System.Drawing.Rectangle,JohnsHope.FPlot.Library.Norms@)">
            <summary>
            Draws a z-<see cref="T:JohnsHope.FPlot.Library.Scale">Scale</see> for a <see cref="T:JohnsHope.FPlot.Library.Plot2D">2D Plot</see>.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> to paint to</param>
            <param name="Model">The <see cref="T:JohnsHope.FPlot.Library.PlotModel"/> of the Plot</param>
            <param name="v">The orientation of the scale</param>
            <param name="draw">If false, the scale is not drawn only is extensions are measured</param>
            <param name="r">The rectangle where the z-gradient is drawn inside</param>
            <param name="norms">The extensions of the painting</param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Library">
            <summary>
            This class represents a source library that can be compiled and imported by the other Items.
            You can implement library routines in this class, compile them and import them in a function.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Library.Source">
            <summary>
            The complete source code of the library.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Library.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Library.GetSource">
            <summary>
            Returns the source of the library.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Library.GetName">
            <summary>
            Returns the name of the Library.
            </summary>
            <returns></returns>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Library.Filename">
            <summary>
            The complete filename of the Library incl. path.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Library.Version">
            <summary>
            The modification time of the Library.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Library.CopyFrom(JohnsHope.FPlot.Library.Library)">
            <summary>
            Copies from another Library.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Library.Load(System.String)">
            <summary>
            Loads the Library from a text file.
            </summary>
            <param name="filename">The file to load</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Library.Save">
            <summary>
            Saves the 
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Library.SaveAs(System.String)">
            <summary>
            Saves the Library in the specified file.
            </summary>
            <param name="filename">The filename used to save the Library</param>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Library.Namespace">
            <summary>
            Returns the namespace extracted from <see cref="F:JohnsHope.FPlot.Library.Library.Source"/>.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.LineStyleChooser">
            <summary>
            A ComboBox used to select <see cref="T:System.Drawing.Drawing2D.DashStyle"/>s.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.LineStyleChooser.LineWidth">
            <summary>
            The linewidth of the lines in the ComboBox.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.LineStyleChooser.SelectedStyle">
            <summary>
            The selected <see cref="T:System.Drawing.Drawing2D.DashStyle"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.LineStyleChooser.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.LineStyleChooser.Reset">
            <summary>
            Resets the LineStyleChooser
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.PaintThread">
            <summary>
            The class that holds the thread that calculates the function values in the background.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PaintThread.DrawDone">
            <summary>
            A value that indicates if the calculation thread has finished.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PaintThread.SynchDraw">
            <summary>
            If set to false the drawing of the plot is asynchronous.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PaintThread.Parent">
            <summary>
            The parent control associated with the PainterThread.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PaintThread.ProgressBar">
            <summary>
            The ProgressBar used to display the calculation progress.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PaintThread.Bounds">
            <summary>
            The plotting area in device coordinates.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PaintThread.Model">
            <summary>
            The Model that contains the IDrawable
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PaintThread.#ctor(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            The constructor of the PaintThread.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PaintThread.CopyFrom(JohnsHope.FPlot.Library.PaintThread)">
            <summary>
            Copies from another PaintThread using a deep copy.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PaintThread.Clone">
            <summary>
            Creates a deep copy of the PaintThread.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PaintThread.MaxProgress">
            <summary>
            The maximum number of steps.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PaintThread.Progress">
            <summary>
            Updates the ProgressBar.Value, using <c>Parent.Invoke</c>, e.g. in a thread safe way.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PaintThread.DoRecalc">
            <summary>
            The main routine of the thread.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PaintThread.DrawStop">
            <summary>
            A boolean value that indicates that the background thread should be stopped.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PaintThread.DrawStart(JohnsHope.FPlot.Library.Plot)">
            <summary>
            This routine starts a new PaintThread depending on wether the plotting area or the plotted
            items have changed.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PaintThread.DrawItems(System.Drawing.Graphics)">
            <summary>
            Paints all Items, according to the data that was calculated by Start
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.IModifyable">
            <summary>
            Describes an obejct that has a modified state.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.IModifyable.Modified">
            <summary>
            Indicates if the object has been modified.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Item">
            <summary>
            Base class of all plottable items.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Item.ListEventArgs">
            <summary>
            The <see cref="T:System.EventArgs"/> of the <see cref="E:JohnsHope.FPlot.Library.Item.AddedToList"/> and <see cref="E:JohnsHope.FPlot.Library.Item.RemovedFromList"/> event handlers.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Item.ListEventArgs.List">
            <summary>
            The <see cref="T:JohnsHope.FPlot.Library.ItemList"/> the <see cref="T:JohnsHope.FPlot.Library.Item"/> was added to or removed from.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Item.ListEventArgs.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Item.ListEventArgs.#ctor(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            A constructor that initializes the List field.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Item.Modified">
            <summary>
            Indicates if the item has been modified and not yet painted.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Item.Name">
            <summary>
            The name of the item.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Item.Compiled">
            <summary>
            If true compilation was successfull.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Item.CompilerResults">
            <summary>
            The results from the compilation of the item.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Item.FirstSourceLine">
            <summary>
            Returns the first line for Items. Always returns 0.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Item.GetSource">
            <summary>
            Returns the source of the item for the compiler.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Item.#ctor">
            <summary>
            Initializes an <c>Item</c>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Item.TypeIndex">
            <summary>
            The TypeIndex used by the compiler.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Item.Errors">
            <summary>
            Gets a string array with the errors of the compilation.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Item.CopyFrom(JohnsHope.FPlot.Library.Item)">
            <summary>
            Copies from another Item.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Item.Clone">
            <summary>
            Creates a copy of the Item.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Item.Painter(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            Gets a painter for the item
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Item.CanPaintTo(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            Indicates if the item can be painted to a plot of the specified type.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Item.TypeName">
            <summary>
            Returns a user friendly name for the Item-Type.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Item.ToString">
            <summary>
            Returns Name
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Item.Compile">
            <summary>
            Compiles the Item.
            </summary>
            <returns>Returns true if compilation was successfull</returns>
        </member>
        <member name="E:JohnsHope.FPlot.Library.Item.AddedToList">
            <summary>
            An event that is raised when the Item is added to an <see cref="T:JohnsHope.FPlot.Library.ItemList"/>.
            </summary>
        </member>
        <member name="E:JohnsHope.FPlot.Library.Item.RemovedFromList">
            <summary>
            An event that is raised when the Item is removed from an <see cref="T:JohnsHope.FPlot.Library.ItemList"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Item.OnAddedToList(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Raises the AddedToList event.
            </summary>
            <param name="List">The <see cref="T:JohnsHope.FPlot.Library.ItemList"/> the Item was added to.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Item.OnRemovedFromList(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Raises the RemovedFromList event.
            </summary>
            <param name="List">The <see cref="T:JohnsHope.FPlot.Library.ItemList"/> the Item was removed from to.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Item.RaiseAddedToList(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Raises the AddedToList event.
            </summary>
            <param name="List">The <see cref="T:JohnsHope.FPlot.Library.ItemList"/> the Item was added to.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Item.RaiseRemovedFromList(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Raises the RemovedFromList event.
            </summary>
            <param name="List">The <see cref="T:JohnsHope.FPlot.Library.ItemList"/> the Item was removed from to.</param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Data">
            <summary>
            Base class of all Data implementations. Data is basically an array of double values.
            The array can be set to check indices, or to automatically adapt its size upon access.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Data.Enumerator">
            <summary>
            The <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;double&gt;</see> of a Data array.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.Enumerator.#ctor(JohnsHope.FPlot.Library.Data)">
            <summary>
            The constructor of the enumerator.
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.Enumerator.Reset">
            <summary>
            Resets the enumerator to the beginning of the list.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.Enumerator.MoveNext">
            <summary>
            Moves to the next item.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Data.Enumerator.Current">
            <summary>
            Returns the current item.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Data.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current item.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.Enumerator.Dispose">
            <summary>
            Disposes the enumerator.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Data.length">
            <exclude/>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Data.autoResize">
            <exclude/>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Data.modified">
            <exclude/>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Data.deepCopy">
            <summary>
            This value indicates if the data should be copied by a deep or a shallow copy. The default value is true.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructor that initializes the Data from an <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable&lt;double&gt;</see>.
            </summary>
            <param name="data">The <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable&lt;double&gt;</see> to initialize the Data with.</param>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Data.Length">
            <summary>
            The Length of the array. This value can be set to adjust the length.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Data.Count">
            <summary>
            Returns the number of items in the data array.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Data.AutoResize">
            <summary>
            This value indicates if the index should be checked upon access, or if the size of the array
            should automatically be adapted upon access. The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Data.Modified">
            <summary>
            Indicates if the array was modified. This value is automatically set.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Data.Item(System.Int32)">
            <summary>
            array indexer.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Data.Item(System.Double)">
            <summary>
            The indexer with a double argument.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.CopyFrom(JohnsHope.FPlot.Library.Data)">
            <summary>
            Copies from another data array either with a deep or a shallow copy, depending on the 
            <see cref="F:JohnsHope.FPlot.Library.Data.deepCopy">deepCopy</see> value. 
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.CopyFrom(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Copies from a <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable&lt;double&gt;</see>. 
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.Clone">
            <summary>
            Returns either a deep or a shallow copy, depending on the 
            <see cref="F:JohnsHope.FPlot.Library.Data.deepCopy">deepCopy</see> value.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.Clear">
            <summary>
            Deletes the array and sets its length to zero.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.CheckIndex(System.Int32)">
            <summary>
            Checks the index and throws a <see cref="T:System.IndexOutOfRangeException"/> if the index is out of bounds.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;double&gt;</see> for this Data-array.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.IndexOf(System.Double)">
            <summary>
            Returns the index of the first occurence of x.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.Insert(System.Int32,System.Double)">
            <summary>
            Inserts the value x at the specified index.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.RemoveAt(System.Int32)">
            <summary>
            Removes the value at the specified index.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.Add(System.Double)">
            <summary>
            Adds the value x at the end of the array.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.Contains(System.Double)">
            <summary>
            Returns true if the value x is contained in the array.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.Remove(System.Double)">
            <summary>
            Removes the value x from the array. 
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Data.IsReadOnly">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.CopyTo(System.Double[],System.Int32)">
            <summary>
            Copies the data to an array.
            </summary>
            <param name="a">The array to copy to.</param>
            <param name="index">The index where to start copying.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.ASCIIData(System.IO.Stream,System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Reads text numbers from a <see cref="T:System.IO.Stream"/> and returns them as a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.
            This method is obsolete, use <see cref="M:JohnsHope.FPlot.Library.Text.Data(System.IO.Stream,System.String,System.Globalization.NumberFormatInfo)">Text.Data</see>
            instead.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from</param>
            <param name="separators">The characters that separate the numbers</param>
            <param name="numberFormat">A <see cref="T:System.Globalization.NumberFormatInfo"/> object that describes the number format,
            for example 3,141 instead of 3.141. You can get a NumberFormat object for the current culture from
            <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo"/>.</param>
            <returns>A <see cref="T:JohnsHope.FPlot.Library.Data"/> of double values read. Data derives from <see cref="T:System.Collections.Generic.IList`1">IList&lt;double&gt;</see>.
            </returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.ASCIIData(System.IO.Stream,System.String)">
            <summary>
            Reads text numbers from a <see cref="T:System.IO.Stream"/> and returns them as a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.
            This method is obsolete, use <see cref="M:JohnsHope.FPlot.Library.Text.Data(System.IO.Stream,System.String)">Text.Data</see> instead.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from</param>
            <param name="separators">The characters that separate the numbers</param>
            <returns>A <see cref="T:JohnsHope.FPlot.Library.Data"/> of double values read. Data derives from <see cref="T:System.Collections.Generic.IList`1">IList&lt;double&gt;</see>.
            </returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.Convert(System.Object,System.Boolean)">
            <summary>
            Converts a number to a double. If <c>BigEndian</c> is true, the byte ordering is swapped on little endian machines.
            </summary>
            <param name="data">The number to convert</param>
            <param name="BigEndian">Specifies if the number is in big-endian format.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.BinaryData(System.IO.Stream,System.Int64,System.Type,System.Boolean)">
            <summary>
            Reads a A <see cref="T:JohnsHope.FPlot.Library.Data"/> collection of double values from a binary stream.
            Data derives from <see cref="T:System.Collections.Generic.IList`1">IList&lt;double&gt;</see>.
            </summary>
            <param name="stream">The stream to read from.</param>
            <param name="type">The binary type of the numbers.</param>
            <param name="length">Specifies the maximum number of bytes to read from the stream.</param>
            <param name="bigEndian">If true, the numbers are read in big-endian format.</param>
            <returns>A <see cref="T:JohnsHope.FPlot.Library.Data"/> of double values read. Data derives from <see cref="T:System.Collections.Generic.IList`1">IList&lt;double&gt;</see>.
            </returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.BinaryData(System.IO.Stream,System.Type,System.Boolean)">
            <summary>
            Reads a A <see cref="T:JohnsHope.FPlot.Library.Data"/> collection of double values from a binary stream.
            Data derives from <see cref="T:System.Collections.Generic.IList`1">IList&lt;double&gt;</see>.
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="type">The binary type of the numbers</param>
            <param name="bigEndian">If true, the numbers are read in big-endian format.</param>
            <returns>A <see cref="T:JohnsHope.FPlot.Library.Data"/> of double values read. Data derives from <see cref="T:System.Collections.Generic.IList`1">IList&lt;double&gt;</see>.
            </returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.BinaryData(System.IO.Stream,System.Type)">
            <summary>
            Reads a A <see cref="T:JohnsHope.FPlot.Library.Data"/> collection of double values from a binary stream.
            Data derives from <see cref="T:System.Collections.Generic.IList`1">IList&lt;double&gt;</see>.
            </summary>
            <param name="stream">The stream to read from</param>
            <param name="type">The binary type of the numbers</param>
            <returns>A <see cref="T:JohnsHope.FPlot.Library.Data"/> of double values read. Data derives from <see cref="T:System.Collections.Generic.IList`1">IList&lt;double&gt;</see>.
            </returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.WAVData(System.IO.Stream,System.Int32,System.Double@)">
            <summary>
            Reads data from a WAV file stream and returns them as a <see cref="T:JohnsHope.FPlot.Library.Data"/> object.
            Data derives from <see cref="T:System.Collections.Generic.IList`1">IList&lt;double&gt;</see>.
            </summary>
            <param name="stream">The WAV file stream to read from</param>
            <param name="channel">The channel of the WAV data that is read. Only this channel will be read.</param>
            <param name="SampleRate">The sampling rate of the WAV data in Hz.</param>
            <returns>An <see cref="T:JohnsHope.FPlot.Library.Data"/> object of double values read.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Data.WAVData(System.IO.Stream,System.Double@)">
            <summary>
            Reads data from a WAV file stream and returns them as a <see cref="T:JohnsHope.FPlot.Library.Data"/> object.
            Data derives from <see cref="T:System.Collections.Generic.IList`1">IList&lt;double&gt;</see>.
            All channels of the WAV file are read.
            </summary>
            <param name="stream">The WAV file stream to read from</param>
            <param name="SampleRate">The sampling rate of the WAV data in Hz.</param>
            <returns>An <see cref="T:JohnsHope.FPlot.Library.Data"/> object of double values read.</returns>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Data.IsSynchronized">
            <summary>
            Gets a boolean value indicating if the array is thread safe. Always returns false.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Data.SyncRoot">
            <summary>
            Gets an object that can be used to snychronize threads. Always returns this.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.SmallData">
            <summary>
            A class containing a small amount of data.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SmallData.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SmallData.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructor that initializes the SmallData from an <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable&lt;double&gt;</see>.
            </summary>
            <param name="data">The <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable&lt;double&gt;</see> to initialize the SmallData with.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SmallData.CopyFrom(JohnsHope.FPlot.Library.SmallData)">
            <summary>
            Copies from another data array either with a deep or shallow copy, depending on the
            <see cref="F:JohnsHope.FPlot.Library.Data.deepCopy"/> value.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SmallData.Clone">
            <summary>
            Creates either a deep or shallow copy, depending on the <see cref="F:JohnsHope.FPlot.Library.Data.deepCopy"/> value.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.SmallData.Length">
            <summary>
            Gets or sets the length of the array.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.SmallData.Item(System.Int32)">
            <summary>
            The indexer of the array. if <see	cref="P:JohnsHope.FPlot.Library.Data.AutoResize">AutoResize</see> is set to true, the length of the array is
            automatically adjusted.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.BigData">
            <summary>
            A class containing big amounts of data.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.BigData.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.BigData.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructor that initializes the BigData from an <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable&lt;double&gt;</see>.
            </summary>
            <param name="data">The <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable&lt;double&gt;</see> to initialize the BigData with.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.BigData.CopyFrom(JohnsHope.FPlot.Library.BigData)">
            <summary>
            Copies from another data array, either with a deep or shallow copy, depending on the 
            <see cref="F:JohnsHope.FPlot.Library.Data.deepCopy">src.deepCopy</see> field.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.BigData.Clone">
            <summary>
            Returns either a deep or shallow copy, depending on the <see cref="F:JohnsHope.FPlot.Library.Data.deepCopy">deepCopy</see> field.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.BigData.Length">
            <summary>
            Sets or gets the length of the data array.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.BigData.Item(System.Int32)">
            <summary>
            The indexer of the array. If <c>AutoResize"</c> is set, the length of the array is automatically
            adjusted upon access.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.FunctionItem">
            <summary>
            The base class for function items.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.FunctionItem.NEval">
            <summary>
            The number of function evaluations. Each function evaluation increments this value by one.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.FunctionItem.p">
            <summary>
            Parameters used by the function.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.FunctionItem.dfdp">
            <summary>
            The derivatives df/dp of the function and the parameters.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.FunctionItem.Modified">
            <summary>
            Indicates if the function has been modified. This value is automatically set if <see cref="F:JohnsHope.FPlot.Library.FunctionItem.p">p</see> has changed or the
            function has been compiled.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionItem.CheckdfdpLength">
            <summary>
            Ensures that either there is no derivative information in the function (no reference to dfdp)
            or that the lenghts of the array p and dfdp are the same. 
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionItem.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionItem.TypeName">
            <summary>
            Returns a user friendly name for the item.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionItem.CopyFrom(JohnsHope.FPlot.Library.Item)">
            <summary>
            Copies from another FunctionItem.
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionItem.Clone">
            <summary>
            Creates a copy of the FunctionItem.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.FunctionItem.Fitable">
            <summary>
            The following property is true, if the function can be fitted.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.FunctionItem.Parameters">
            <summary>
            An list of the functions parameters.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.FunctionItem.ThrowOnErrors">
            <summary>
            If set to false, exceptions will be cached upon calculation of the function and double.NaN returned instead
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionItem.FunctionItems(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Returns all FunctionItems in a given list
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.FunctionItem.FirstSourceLine">
            <summary>
            Returns the linenumber of the first line in the source. Always returns 1.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Function1DItem">
            <summary>
            This class represents a ordinary one dimensional function of the form
            <code>
            double f(double x) {
              ...
            }
            </code>
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Function1DItem.Instance">
            <summary>
            The base class of a compiled instance.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Function1DItem.Instance.p">
            <summary>
            The parameter array p.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Function1DItem.Instance.dfdp">
            <summary>
            The derivatives df/dp.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function1DItem.Instance.f(System.Double)">
            <summary>
            The function to evaluate.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Function1DItem.Color">
            <summary>
            The color used to draw the function
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Function1DItem.LineStyle">
            <summary>
            The line style used to draw the item.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Function1DItem.LineWidth">
            <summary>
            The line width used to draw the item. 
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Function1DItem.Source">
            <summary>
            The source code of the function. The source represents the following function:
            <code>
            double[] p, dfdp;
            double f(double x) {
              ... Source ...
            }
            </code>
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function1DItem.CopyFrom(JohnsHope.FPlot.Library.Item)">
            <summary>
            Copies from another Funtion1D.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function1DItem.Clone">
            <summary>
            Creates a copy of the Function1DItem.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function1DItem.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function1DItem.#ctor(System.String)">
            <summary>
            A constructor that set the Source of the function and compiles it.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function1DItem.f(System.Double)">
            <summary>
            The function that evaluates the 1D Function.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function1DItem.GetSource">
            <summary>
            Returns the source of the function.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Function1DItem.ClassInstance">
            <summary>
            Adapts the length of the <c>p</c> and <c>dfdp</c> arrays.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Function1DItem.ClassName">
            <summary>
            Gets the class name for the compiler.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Function1DItem.HasDerivatives">
            <summary>
            Returns if the function source calculates the derivatives <c>dfdp</c>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function1DItem.Painter(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            Returns a painter for the function.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function1DItem.TypeName">
            <summary>
            Gets a user friendly name for the Item type.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function1DItem.Function1DItems(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Returns all Function1DItems in a given list
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Function1DPainter2D">
            <summary>
            This class denotes a 2D <see cref="T:JohnsHope.FPlot.Library.Painter">Painter</see> for a Function1D item.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function1DPainter2D.#ctor(JohnsHope.FPlot.Library.PlotModel,JohnsHope.FPlot.Library.Item)">
            <summary>
            A constructor that sets the Item and PlotModel of the painter.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function1DPainter2D.Start(JohnsHope.FPlot.Library.Plot)">
            <summary>
            Starts the Recalculation of the Painter.
            </summary>
            <param name="plot">The Plot to paint from</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function1DPainter2D.Calc(JohnsHope.FPlot.Library.Plot)">
            <summary>
            Recalculates the Painter.
            </summary>
            <param name="plot">The Plot to paint from</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function1DPainter2D.Paint(System.Drawing.Graphics,JohnsHope.FPlot.Library.Plot)">
            <summary>
            Paints the previosuly calculated Painter to g.
            </summary>
            <param name="g">The Graphics to paint to</param>
            <param name="plot">The Plot to paint from</param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Function2DItem">
            <summary>
            This class represents two dimensional functions of the form
            <code>
            double f(double x, double y) {
              ...
            }
            </code>
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Function2DItem.Instance">
            <summary>
            The base class of a compiled instance.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Function2DItem.Instance.p">
            <summary>
            The parameter array p.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Function2DItem.Instance.dfdp">
            <summary>
            The derivatives df/dp.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function2DItem.Instance.f(System.Double,System.Double)">
            <summary>
            The function to evaluate.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Function2DItem.Gradient">
            <summary>
            The Gradient used to draw the function.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Function2DItem.Source">
            <summary>
            The source code of the function. The source represents the following function:
            <code>
            double[] p, dfdp;
            double f(double x, double y) {
              ... Source ...
            }
            </code>
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function2DItem.CopyFrom(JohnsHope.FPlot.Library.Item)">
            <summary>
            Copies from another Function2D.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function2DItem.Clone">
            <summary>
            Creates a copy of the Function2DItem.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function2DItem.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function2DItem.#ctor(System.String)">
            <summary>
            A constructor that set the Source of the function and compiles it.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function2DItem.f(System.Double,System.Double)">
            <summary>
             The evaluating function.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Function2DItem.Color">
            <summary>
            The color used to draw the function.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function2DItem.GetSource">
            <summary>
            Returns the C# source of the function.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Function2DItem.ClassInstance">
            <summary>
            Adapts the length of the <c>p</c> and <c>dfdp</c> arrays.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Function2DItem.ClassName">
            <summary>
            Gets the class name for the compiler.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function2DItem.Painter(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            Returns a painter for the function.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function2DItem.TypeName">
            <summary>
            Gets a user friendly name for the item type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function2DItem.Function2DItems(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Returns all Function1DItems in a given list
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Function2DPainter2D">
            <summary>
            This class represents a 2D <see cref="T:JohnsHope.FPlot.Library.Painter">Painter</see> for a 2D function.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Function2DPainter2D.cache">
            <summary>
            The calculated bitmap of the function.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function2DPainter2D.#ctor(JohnsHope.FPlot.Library.PlotModel,JohnsHope.FPlot.Library.Item)">
            <summary>
            A constructor setting the model and item of the painter.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function2DPainter2D.Start(JohnsHope.FPlot.Library.Plot)">
            <summary>
            Starts recalculation of the painter.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function2DPainter2D.Calc(JohnsHope.FPlot.Library.Plot)">
            <summary>
            Recalculates the Painter
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Function2DPainter2D.Paint(System.Drawing.Graphics,JohnsHope.FPlot.Library.Plot)">
            <summary>
            Paints the Painter.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.FunctionColorItem">
            <summary>
            This class represents two dimensional functions that return a Color of the form
            <code>
            System.Drawing.Color f(double x, double y) {
              ...
            }
            </code>
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.FunctionColorItem.Instance">
            <summary>
            The base class of a compiled instance.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.FunctionColorItem.Instance.p">
            <summary>
            The parameter array p.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.FunctionColorItem.Instance.dfdp">
            <summary>
            The derivatives df/dp.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionColorItem.Instance.f(System.Double,System.Double)">
            <summary>
            The function to evaluate.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.FunctionColorItem.Source">
            <summary>
            The source code of the function. The source represents the following function:
            <code>
            double[] p, dfdp;
            System.Drawing.Color f(double x, double y) {
              ... Source ...
            }
            </code>
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionColorItem.CopyFrom(JohnsHope.FPlot.Library.Item)">
            <summary>
            Copies from another FunctionColor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionColorItem.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionColorItem.#ctor(System.String)">
            <summary>
            A constructor that set the Source of the function and compiles it.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionColorItem.f(System.Double,System.Double)">
            <exclude/>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionColorItem.GetSource">
            <summary>
            Returns the C# code for the function.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.FunctionColorItem.ClassInstance">
            <summary>
            Adapts the length of the <c>p</c> and <c>dfdp</c> arrays.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.FunctionColorItem.ClassName">
            <summary>
            Gets the class name for the compiler.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionColorItem.Painter(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            Returns a painter for the function.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionColorItem.TypeName">
            <summary>
            Gets a user friendly name for the Item type.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionColorItem.FunctionColorItems(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Returns all Function1DItems in a given list
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.FunctionColorPainter2D">
            <summary>
            This class is a 2D <see cref="T:JohnsHope.FPlot.Library.Painter">Painter</see> for a color function.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionColorPainter2D.#ctor(JohnsHope.FPlot.Library.PlotModel,JohnsHope.FPlot.Library.Item)">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionColorPainter2D.Start(JohnsHope.FPlot.Library.Plot)">
            <summary>
            Starts calculation of the Painters image data
            </summary>
            <param name="plot">The Plot to paint from</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionColorPainter2D.Calc(JohnsHope.FPlot.Library.Plot)">
            <summary>
            Recalculates the Painter.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.FunctionColorPainter2D.Paint(System.Drawing.Graphics,JohnsHope.FPlot.Library.Plot)">
            <summary>
            Paints the cached bitmap that was previously calculated.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.GradientChooser">
            <summary>
            A class that represents a <see cref="T:System.Windows.Forms.ComboBox"/> where one can select a gradient.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GradientChooser.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.GradientChooser.SelectedGradient">
            <summary>
            The selected gradient.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GradientChooser.Reset">
            <summary>
            Resets the GradientChooser (and reloads all gradients from the gradients directory).
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.IGradient">
            <summary>
            An interface that represents color gradients.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.IGradient.Color(System.Double)">
            <summary>
            This routine returns a color depending on the parameter x.
            </summary>
            <param name="x">A value between 0 and 1.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.IGradient.Clone">
            <summary>
            Creates a deep copy of the gradient.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JohnsHope.FPlot.Library.GradientPainter">
            <summary>
            A class that fills a rectangle with a <see cref="T:JohnsHope.FPlot.Library.IGradient">Gradient</see>.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.GradientPainter.Direction">
            <summary>
            The direction of the gradient.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.GradientPainter.Direction.Down">
            <summary>
            The gradient is drawn downwards.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.GradientPainter.Direction.Right">
            <summary>
            The gradient is drawn to the right.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.GradientPainter.Direction.Up">
            <summary>
            The gradient is drawn upwards.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.GradientPainter.Direction.Left">
            <summary>
            The gradient is drawn to the left.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.GradientPainter.FillRectangle(System.Drawing.Graphics,JohnsHope.FPlot.Library.IGradient,System.Drawing.Rectangle,JohnsHope.FPlot.Library.GradientPainter.Direction)">
            <summary>
            Fills a rectangle with the gradient.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object to draw to.</param>
            <param name="gradient">The gradient to use.</param>
            <param name="frame">The rectangle to fill with the gradient.</param>
            <param name="direction">The direction of the gradient.</param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.LinearGradient">
            <summary>
            This class represents a linear gradient.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.LinearGradient.LowerColor">
            <summary>
            The <see cref="M:JohnsHope.FPlot.Library.LinearGradient.Color(System.Double)"/> at the lower end of the gradient.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.LinearGradient.UpperColor">
            <summary>
            The <see cref="M:JohnsHope.FPlot.Library.LinearGradient.Color(System.Double)"/> at the upper end of the gradient.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.LinearGradient.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            The contructor for the gradient.
            </summary>
            <param name="LowerColor">The <see cref="M:JohnsHope.FPlot.Library.LinearGradient.Color(System.Double)"/> at the lower end of the gradient.</param>
            <param name="UpperColor">The <see cref="M:JohnsHope.FPlot.Library.LinearGradient.Color(System.Double)"/> at the upper end of the gradient.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.LinearGradient.#ctor">
            <summary>
            Default constructor. Initializes the gradient with a <see cref="F:JohnsHope.FPlot.Library.LinearGradient.LowerColor"/> = <see cref="P:System.Drawing.Color.White"/> and
            <see cref="F:JohnsHope.FPlot.Library.LinearGradient.UpperColor"/> = <see cref="P:System.Drawing.Color.Black"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.LinearGradient.Color(System.Double)">
            <summary>
            Returns a color from a value of x between 0 and 1.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.LinearGradient.Clone">
            <summary>
            Returns a deep copy of the LinearGradient.
            </summary>
            <returns></returns>
        </member>
        <member name="T:JohnsHope.FPlot.Library.RainbowGradient">
            <summary>
            A rainbow gradient.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.RainbowGradient.Color(System.Double)">
            <summary>
            The function that converts a double into a color.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.RainbowGradient.Clone">
            <summary>
            Returns a deep copy of the gradient.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.TransparentGradient">
            <summary>
            A gradient that always returns <see cref="P:System.Drawing.Color.Transparent"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.TransparentGradient.Color(System.Double)">
            <summary>
            Returns a color from a value of x between 0 and 1.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.TransparentGradient.Clone">
            <summary>
            Returns a deep copy of the gradient.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.SegmentGradient">
            <summary>
            A gradient that consists of individual segments of other gradients.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.SegmentGradient.Segment">
            <summary>
            A segment of a SegmentGradient.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.SegmentGradient.Segment.x">
            <summary>
            The upper limit of the segment. Must be a value between 0 and 1. The last segment must have a value of 1.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.SegmentGradient.Segment.Gradient">
            <summary>
            The gradient used in this segment.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SegmentGradient.Segment.#ctor(System.Double,JohnsHope.FPlot.Library.IGradient)">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SegmentGradient.Segment.Clone">
            <summary>
            Creates a deep copy of the segment.
            </summary>
            <returns></returns>
        </member>
        <member name="P:JohnsHope.FPlot.Library.SegmentGradient.Item(System.Int32)">
            <summary>
            The indexer of a SegmentGradient.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.SegmentGradient.Count">
            <summary>
            Returns the number of segments in the SegmentGradient.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.SegmentGradient.IsReadOnly">
            <summary>
            Always returns false.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SegmentGradient.IndexOf(JohnsHope.FPlot.Library.SegmentGradient.Segment)">
            <summary>
            Returns the index of the specified segment.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SegmentGradient.Insert(System.Int32,JohnsHope.FPlot.Library.SegmentGradient.Segment)">
            <summary>
            Inserts a segment into the gradient. After inserting the gradient is automaitcally sorted.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SegmentGradient.Add(JohnsHope.FPlot.Library.SegmentGradient.Segment)">
            <summary>
            Adds a segment to the gradient. After adding the gradient is automaitcally sorted.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SegmentGradient.Clear">
            <summary>
            Clears the gradient from all segments.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SegmentGradient.Contains(JohnsHope.FPlot.Library.SegmentGradient.Segment)">
            <summary>
            Returns true if the segment is contained in the gradient.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SegmentGradient.CopyTo(JohnsHope.FPlot.Library.SegmentGradient.Segment[],System.Int32)">
            <summary>
            Copies the segments to an array.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SegmentGradient.Remove(JohnsHope.FPlot.Library.SegmentGradient.Segment)">
            <summary>
            Removes a segment from the gradient.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SegmentGradient.RemoveAt(System.Int32)">
            <summary>
            Removes the segment at the given index from the gradient.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SegmentGradient.GetEnumerator">
            <summary>
            Returns an IEnumerator.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SegmentGradient.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SegmentGradient.Clone">
            <summary>
            Returns a deep copy of the gradient.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SegmentGradient.LoadGIMP(System.String)">
            <summary>
            Loads a GIMP-Gradient .ggr file 
            </summary>
            <param name="filename">The path of the file to load.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.SegmentGradient.Color(System.Double)">
            <summary>
            Returns a color from a double value x.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Gradients">
            <summary>
            Represents the available gradients.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Gradients.List">
            <summary>
            The list of global gradients.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Gradients.LinearGradient">
            <summary>
            Represents a linear gradient from white to black.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Gradients.Reset">
            <summary>
            Resets the global list of gradients.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.PlotControl">
             <summary>
             PlotControl is a Windows.Forms Control that displays mathematical funcions and data. Here is some example code, that displays a
             x^2 function.
             <code>
             using JohsnHope.FPlot.Library;
             using System.Windows.Forms;
             using System.Drawing;
             
             namespace FPlotTest {
             
            		public class MainForm: Form {
            		
            			MainForm() {
            				PlotControl plot = new PlotControl(Plot.Type.Plot2D);
            				plot.Bounds = new Rectangle(5, 5, 100, 100);
            				Function1DItem f = new Function1DItem();
            				f.source = &quot;return x*x&quot;;
            				Compiler.Compile(f);
            				plot.Model.Add(f);
            				Add(plot);
            			}
            		}
            		
            		public static Main(string[] args) {
            			MainForm f = new MainForm();
            			f.Bounds = new Rectangle(0, 0, 110, 110);
            			Application.Run(f);
            		}
             
            }
             </code>
             </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotControl.Plot">
            <summary>
            The Plot that draws the content of the Control
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotControl.scale">
            <summary>
            A constant representing the scale transform used when drawing the control.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotControl.SynchDraw">
            <summary>
            if SynchDraw is set to false, Draw returns before the complete plot is drawn.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.Model">
            <summary>
            The PlotModel for the PlotControl.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.#ctor(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            The constructor of the control.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.#ctor(JohnsHope.FPlot.Library.Plot.Type)">
            <summary>
            Constructor for a new PlotControl of the specified type
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.#ctor">
            <summary>
            The default constructor. Creates a PlotControl of type Plot.Type.Plot2D.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.ProgressBar">
            <summary>
            <c>ProgressBar</c> denotes a System.Windows.Form ProgressBar, that shows the progress of the calculating Painter thread.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.Dispose(System.Boolean)">
            <summary>
            Dispose can be called to abort all threads.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.CopyFrom(JohnsHope.FPlot.Library.PlotControl)">
            <summary>
            Copies from another PlotControl.
            </summary>
            <param name="plot">The control to copy from.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.Clone">
            <summary>
            Creates a deep copy of the control. 
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.x0">
            <summary>
            Represents the left border of the displayed plotting area.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.x1">
            <summary>
            Represents the right border of the displayed plotting area.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.y0">
            <summary>
            Represents the lower border of the displayed plotting area.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.y1">
            <summary>
            Represents the upper border of the displayed plotting area.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.z0">
            <summary>
            Represents the lower value of the displayed z-range.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.z1">
            <summary>
            Represents the upper value of the displayed z-range.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.xAxis">
            <summary>
            If true a x-axis will be drawn at y = 0. The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.yAxis">
            <summary>
            If true a y-axis will be drawn at x = 0. The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.Border">
            <summary>
            If true a box is drawn around the plotting area. The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.FixXtoY">
            <summary>
            If true the x-scale is fixed to the y-scale. The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.xRaster">
            <summary>
            If true x-rasterlines are drawn. The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.yRaster">
            <summary>
            If true y-rasterlines are drawn. The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.Legend">
            <summary>
            If true a legend is drawn. The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.xScale">
            <summary>
            If true, the x-scale is drawn. The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.yScale">
            <summary>
            If true, the y-scale is drawn. The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.zScale">
            <summary>
            If true, a z-scale is drawn. The z-scale is only drawn if a corresponding 2D-function is displayed. The default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.xGrid">
            <summary>
            If true, the x-grid is drawn. The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.yGrid">
            <summary>
            If true, a y-grid is drawn. The default value is <c>false</c>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.GetPrintDocument">
            <summary>
            Returns a System.Drawing.Printing.PrintDocument. You can use this PrintDocument to print the control to a printer.
            </summary>
            <code>
            plotControl plot;
            System.Windows.Forms.PrintDialog dialog = new System.Windows.Forms.PrintDialog();
            System.Drawing.Printing.PrintDocument doc = plot.GetPrintDocument();
            dialog.Document = doc;
            DialogResult res = printDialog.ShowDialog();
            if (res == DialogResult.OK) {
              doc.Print();
            }
            </code>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.SetRaster(System.Double,System.Double,System.Double)">
            <summary>
            Sets the witdh of the main raster lines in the x-, y- and z-scale. Throws a
            <c>System.ArgumentOutOfRangeException</c> if the arguments are invalid.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.SetRange(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the displayed range in the plotting area of the control.
            </summary>
            <param name="x0">The right border of the plotting area.</param>
            <param name="x1">The left border of the plotting area.</param>
            <param name="y0">The lower border of the plotting area.</param>
            <param name="y1">The upper border of the plotting area.</param>
            <param name="z0">The lower z-range of the plotting area.</param>
            <param name="z1">The upper z-range of the plotting area.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.SetRange(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the displayed range in the plotting area of the control.
            </summary>
            <param name="x0">The right border of the plotting area.</param>
            <param name="x1">The left border of the plotting area.</param>
            <param name="y0">The lower border of the plotting area.</param>
            <param name="y1">The upper border of the plotting area.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.ResetRange">
            <summary>
            Sets the displayed range accoring to the property <c>FixXtoY</c>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.Draw(System.Drawing.Graphics)">
            <summary>
            Paints the control.
            </summary>
            <param name="g">The Graphics object to paint to.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.HandleInvalidate">
            <summary>
            Handles the Invalidate event
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.HandleUpdate(JohnsHope.FPlot.Library.Item)">
            <summary>
            Handles the Update event
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.HandleAdd(JohnsHope.FPlot.Library.Item)">
            <summary>
            Handles the Add event
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.HandleRemove(JohnsHope.FPlot.Library.Item)">
            <summary>
            Handles the Remove event
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.HandleReplace(JohnsHope.FPlot.Library.Item,JohnsHope.FPlot.Library.Item)">
            <summary>
            Handles the Replace event
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.HandleReorder(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Handles the Reorder event
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotControl.SerializeHandler">
            <summary>
            Returns false, so the control won't be serialized.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the control. Inherited from System.Windows.Forms.Control.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the OnMouseDown event
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the OnMouseMove event
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the OnMouseUp event
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the OnMouseWheel event
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.OnResize(System.EventArgs)">
            <summary>
            Handles the OnResize event
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.SaveAsImage(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Saves the Plot of the PlotControl to an image file.
            </summary>
            <param name="filename">The filename</param>
            <param name="format">The desired image format</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotControl.SaveAsImage(System.String)">
            <summary>
            Saves the PlotControl in an image file with the image format specified by the filename extension.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.PlotModel">
            <summary>
            The Model of a <see cref="T:JohnsHope.FPlot.Library.PlotControl">PlotControl</see> and of a <see cref="T:JohnsHope.FPlot.Library.Plot">Plot</see>.
            The Model contains all data such as functions, plotting area, scale-style, etc.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.PlotModel.ItemEventHandler">
            <summary>
            An Event handler that handles events from the ItemsModel
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.ItemEventHandler.Model">
            <summary>
            The PlotModel of the ItemEventHandler
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.ItemEventHandler.#ctor(JohnsHope.FPlot.Library.ItemsModel,JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            Creates an ItemEventHandler that delegates events from the ItemsModel to the PlotModel
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.ItemEventHandler.HandleUpdate(JohnsHope.FPlot.Library.Item)">
            <summary>
            Handles Update events
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.ItemEventHandler.HandleRemove(JohnsHope.FPlot.Library.Item)">
            <summary>
            Handles Remove events
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.ItemEventHandler.HandleAdd(JohnsHope.FPlot.Library.Item)">
            <summary>
            Handles Add events
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.ItemEventHandler.HandleReplace(JohnsHope.FPlot.Library.Item,JohnsHope.FPlot.Library.Item)">
            <summary>
            Handles Replace events
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.ItemEventHandler.HandleReorder(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Handles Reorder events
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.ItemEventHandler.HandleInvalidate">
            <summary>
            Handles Invalidate events
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.Painters">
            <summary>
            The Painters of all Items in the Plot.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.PlotType">
            <summary>
            The type of the plot.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.x">
            <summary>
            All properties of the x-scale.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.y">
            <summary>
            All properties of the y-scale.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.z">
            <summary>
            All properties of the z-scale.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.Twoside">
            <summary>
            Indicates wether the scales should be drawn on both sides.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.Border">
            <summary>
            Indicates wether the plotting area should be drawn inside a box.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.FixXtoY">
            <summary>
            Indicates if the x-scale should be fixed to the y-scale.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.Legend">
            <summary>
            Indicates if a legend should be drawn.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.LegendBorder">
            <summary>
            Indicates if a border should be drawn around the legend.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.ScaleFont">
            <summary>
            The font to use for the scales.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.LegendFont">
            <summary>
            The font to use for the legend.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.UnitsFont">
            <summary>
            The font to use in the units.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.BackgroundColor">
            <summary>
            The background color.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.ScaleColor">
            <summary>
            The color to use for all scales.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.ScaleLineWidth">
            <summary>
            The line-witdth to draw the scale with.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.Filename">
            <summary>
            The filename that is used by Save. Load updates Filename.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.PlotModel.view">
            <summary>
            The View parameters of a 3D Plot
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.#ctor(JohnsHope.FPlot.Library.ItemsModel)">
            <summary>
            Initializes a PlotModel with the given Items Model
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.#ctor(JohnsHope.FPlot.Library.ItemsModel,JohnsHope.FPlot.Library.Plot.Type)">
            <summary>
            Initializes a PlotModel with the given Items Model
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotModel.ItemsModel">
            <summary>
            Represents the global ItemModel of all global Items
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotModel.View">
            <summary>
            Sets or gets the 3D view parameters of the PlotModel
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.CopyFrom(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            Copies from another model with a deep copy.
            </summary>
            <param name="m">The model to copy from.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.Clone">
            <summary>
            Creates a deep copy.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.HandleUpdate(JohnsHope.FPlot.Library.Item)">
            <summary>
            Handles Update events
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.HandleRemove(JohnsHope.FPlot.Library.Item)">
            <summary>
            Handles Remove events
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.HandleAdd(JohnsHope.FPlot.Library.Item)">
            <summary>
            Handles Add events
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.HandleReplace(JohnsHope.FPlot.Library.Item,JohnsHope.FPlot.Library.Item)">
            <summary>
            Handles Replace events
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.HandleReorder(JohnsHope.FPlot.Library.ItemList)">
            <summary>
            Handles Reorder events
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.HandleInvalidate">
            <summary>
            Handles Invalidate events
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotModel.x0">
            <summary>
            Get or sets the left border of the plotting area.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotModel.x1">
            <summary>
            Get or sets the right border of the plotting area.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotModel.y0">
            <summary>
            Get or sets the lower border of the plotting area.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotModel.y1">
            <summary>
            Get or sets the upper border of the plotting area.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotModel.z0">
            <summary>
            Get or sets the lower z-border of the plotting area.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotModel.z1">
            <summary>
            Get or sets the upper z-border of the plotting area.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotModel.xLog">
            <summary>
            Indicates wether the x-scale is logarithmic.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotModel.yLog">
            <summary>
            Indicates wether the y-scale is logarithmic.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotModel.zLog">
            <summary>
            Indicates wether the z-scale is logarithmic.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotModel.Modified">
            <summary>
            Indicates if the model was modified.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.GetPaintableItem">
            <summary>
            Returns the first Function2DItem in the PlotModel or null.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.ResetRaster">
            <summary>
            Resets the raster width to default values.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.CalcRange(System.Double,System.Double,System.Double,System.Double,System.Drawing.Rectangle,System.Double@,System.Double@)">
            <summary>
            Calculates the values for x0 and x1 if FixXtoY is set to true. If it is set to false x0 and x1 remain unchanged.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.SetRange(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Sets the range of the plotting area. Throws an <c>System.ArgumentException</c> if the parameters
            are invalid.
            </summary>
            <param name="x0">The left border of the plotting area.</param>
            <param name="x1">The right border of the plotting area.</param>
            <param name="y0">The lower border of the plotting area.</param>
            <param name="y1">The upper border of the plotting area.</param>
            <param name="z0">The lower z-border of the plotting area.</param>
            <param name="z1">The upper z-border of the plotting area.</param>
            <param name="bounds">The bounds of the plotting area in pixels.</param>
            <param name="invalidate">If true the model's Invalidated event is fired.</param>
            <param name="calc">If true, the x0 and x1 bounds are set according to FixXtoY</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.SetRange(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Drawing.Rectangle)">
            <summary>
            Sets the range of the plotting area. Throws an <c>System.ArgumentException</c> if the parameters
            are invalid.
            </summary>
            <param name="x0">The left border of the plotting area.</param>
            <param name="x1">The right border of the plotting area.</param>
            <param name="y0">The lower border of the plotting area.</param>
            <param name="y1">The upper border of the plotting area.</param>
            <param name="z0">The lower z-border of the plotting area.</param>
            <param name="z1">The upper z-border of the plotting area.</param>
            <param name="bounds">The bounds of the plotting area in pixels.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.SetRange(System.Double,System.Double,System.Double,System.Double,System.Drawing.Rectangle)">
            <summary>
            Sets the range of the plotting area.
            </summary>
            <param name="x0">The left border of the plotting area.</param>
            <param name="x1">The right border of the plotting area.</param>
            <param name="y0">The lower border of the plotting area.</param>
            <param name="y1">The upper border of the plotting area.</param>
            <param name="bounds">The bounds of the plotting area in pixels.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.SetRange(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the range of the plotting area.
            </summary>
            <param name="x0">The left border of the plotting area.</param>
            <param name="x1">The right border of the plotting area.</param>
            <param name="y0">The lower border of the plotting area.</param>
            <param name="y1">The upper border of the plotting area.</param>
            <param name="z0">The lower z-border of the plotting area.</param>
            <param name="z1">The upper z-border of the plotting area.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotModel.SetRange(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the range of the plotting area.
            </summary>
            <param name="x0">The left border of the plotting area.</param>
            <param name="x1">The right border of the plotting area.</param>
            <param name="y0">The lower border of the plotting area.</param>
            <param name="y1">The upper border of the plotting area.</param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.PlotPrintDocument">
            <summary>
            A class that can be used to print the <see cref="T:JohnsHope.FPlot.Library.PlotControl">PlotControl</see>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotPrintDocument.#ctor(JohnsHope.FPlot.Library.PlotControl)">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.PlotPrintDocument.UseFullPage">
            <summary>
            Indicates if the Graph should cover the full page or should be printed with the current width/height ratio. 
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotPrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            This method is called when printing starts. It creates a local copy of the
            <see cref="T:JohnsHope.FPlot.Library.PlotModel">PlotModel</see> from the plot that was passed to the constructor. 
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.PlotPrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            This method is called to print an individual page.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.ILine">
            <summary>
            Describes a item that has line attributes.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.ILine.Color">
            <summary>
            The color of the line.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.ILine.LineWidth">
            <summary>
            The width of the line.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.ILine.LineStyle">
            <summary>
            The DashStyle of the line.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.IInstance">
            <summary>
            An interface that indicates that a item is a compiled instance.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Painter">
            <summary>
            Describes a painter that paints an item in a <see cref="T:JohnsHope.FPlot.Library.Plot">Plot</see>.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Painter.Modified">
            <summary>
            Indicates if the Item of the Painter has been modified.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Painter.Recalc">
            <summary>
            Indicates if the painter must recalc the item's image.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Painter.Item">
            <summary>
            The item the Painter is painting.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Painter.Model">
            <summary>
            The PlotModel the Painter belongs to. 
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Painter.x0">
            <summary>
            The Range of the Plot, from (x0, y0, z0) to (x1, y1, z1)
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Painter.y0">
            <summary>
            The Range of the Plot, from (x0, y0, z0) to (x1, y1, z1)
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Painter.z0">
            <summary>
            The Range of the Plot, from (x0, y0, z0) to (x1, y1, z1)
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Painter.x1">
            <summary>
            The Range of the Plot, from (x0, y0, z0) to (x1, y1, z1)
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Painter.y1">
            <summary>
            The Range of the Plot, from (x0, y0, z0) to (x1, y1, z1)
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Painter.z1">
            <summary>
            The Range of the Plot, from (x0, y0, z0) to (x1, y1, z1)
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Painter.#ctor(JohnsHope.FPlot.Library.PlotModel,JohnsHope.FPlot.Library.Item)">
            <summary>
            Constructor of a Painter.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Painter.Start(JohnsHope.FPlot.Library.Plot)">
            <summary>
            Prepares the Painter for painting. The default implementation of this routine is:
            <code>
              if (Modified) {
                Modified = false; Recalc = true;
             	}
            </code>
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Painter.Calc(JohnsHope.FPlot.Library.Plot)">
            <summary>
            Recalculates the image data in order to paint the Painter fast. This routine is called from the separate 
            Painter thread. If p.StopDraw gets true during execution, the recalculation can be aborted. In order to be
            thread safe, this routine must lock the painter e.g. with <c>lock(this)</c> upon making changes
            to the painter.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Painter.Paint(System.Drawing.Graphics,JohnsHope.FPlot.Library.Plot)">
            <summary>
            Paints the calculated image data of the Painter to the Grapics g. In order to be thread safe,
            this routine must try to aquire a lock on the painter e.g. with either <c>Monitor.TryEnter(this)</c> or 
            <c>lock(this)</c> upon reading from the Painter. If the Painter is locked, the Painter is in the process of 
            recalculating and the Painter cannot yet be painted.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Plot2D">
            <summary>
            Plots 2D plots
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.#ctor(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            Constructs a new Plot2D.
            </summary>
            <param name="Model">The PlotModel of the Plot2D</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.CopyFrom(JohnsHope.FPlot.Library.Plot2D)">
            <summary>
            Copies from another Plot2D object
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.Clone">
            <summary>
            Clones the Plot2D object
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.DeviceCoordinateX(System.Double)">
            <summary>
            Returns the x device coordinate of a x world coordinate 
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.DeviceCoordinateY(System.Double)">
            <summary>
            Returns the y device coordinate of a y world coordinate.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.WorldCoordinateX(System.Int32)">
            <summary>
            Returns a x world coordinate of a x device coordinate.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.WorldCoordinateY(System.Int32)">
            <summary>
            Returns a y world coordinate of a y device coordinate.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.DeviceCoordinate(JohnsHope.FPlot.Library.GraphicsBase.Point)">
            <summary>
            Returns the device coordinates of a world cooridnates Point.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.WorldCoordinate(System.Drawing.PointF)">
            <summary>
            Returns the world coordinates of a device coordinates PointF.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.DeviceCoordinates(JohnsHope.FPlot.Library.GraphicsBase.Point[],System.Drawing.PointF[])">
            <summary>
            Transforms the points in <em>world</em> to device coordinates in the array <em>device</em>. <em>device</em> must be of the
            same size than <em>world</em>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.WorldCoordinates(System.Drawing.PointF[],JohnsHope.FPlot.Library.GraphicsBase.Point[])">
            <summary>
            Transforms the points in <em>device</em> to world coordinates in the array <em>world</em>. <em>world</em> must be of the
            same size than <em>device</em>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.MovePlot(System.Int32,System.Int32)">
            <summary>
            Moves the displayed range in the plotting area by the specified amount of pixels.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the control.
            </summary>
            <param name="g">The Graphics object to paint to.</param>
            <param name="bounds">The bounds of the plotting area.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.OnResize(System.EventArgs)">
            <summary>
            Resizes the control.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.OnMouseDown(JohnsHope.FPlot.Library.Plot.MouseEventArgs)">
            <summary>
            Is called when a mouse button is pressed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.OnMouseMove(JohnsHope.FPlot.Library.Plot.MouseEventArgs)">
            <summary>
            Is called when the mouse moves over the control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.Zoom(System.Boolean,System.Drawing.Rectangle)">
            <summary>
            Zooms into or out of a specified rectangle in device coordinates.
            </summary>
            <param name="zoomIn">Zoom in or out</param>
            <param name="area">The rectangle in device coordinates.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.OnMouseUp(JohnsHope.FPlot.Library.Plot.MouseEventArgs)">
            <summary>
            Is called when a mouse-button is released.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.OnMouseWheel(JohnsHope.FPlot.Library.Plot.MouseEventArgs)">
            <summary>
            Is called when the mouse-wheel is moved.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Plot2D.SetRange(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the range of a 2D Plot
            </summary>
            <param name="x0"></param>
            <param name="x1"></param>
            <param name="y0"></param>
            <param name="y1"></param>
            <param name="z0"></param>
            <param name="z1"></param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Web.ZoomedEventArgs">
            <summary>
            The EventArgs of the Zoomed event. Contains a bool field that indicates if the PlotImage was zoomed in or out.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Web.ZoomedEventArgs.zoomedIn">
            <summary>
            true if the PlotImage was zoomed in, false if it was zoomed out.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Web.ZoomedEventArgs.zoomRect">
            <summary>
            The rectangle of device coordinates that was selected for zooming on the client. If you have disabled ViewState and still 
            want to implement client zooming facilities you must implement the zooming manually. You can call
            ((Plot2D)Plot).Zoom(zoomedIn, zoomRect) in the Zoomed event handler.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Web.ZoomedEventArgs.#ctor(System.Boolean,System.Drawing.Rectangle)">
            <summary>
            The contructor.
            </summary>
            <param name="zoomedIn">true if zoomed in, false if zoomed out.</param>
            <param name="zoomRect">The rectangle in device coordinates, that was selected for zooming.</param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Web.ZoomedEventHandler">
            <summary>
            The Zoomed event delegate.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Web.PlotImage">
            <summary>
            A WebControl derived from the WebControl Image that shows an image of a Plot.
            Here is an Example of how to include a Plot - Image on a ASP.NET Page:
            <code>
            &lt;%@ Page Language="C#" %&gt;
            &lt;%@ Import Namespace="JohnsHope.FPlot.Library" %&gt;
            &lt;%@ Register TagPrefix="fplot" Namespace="JohnsHope.FPlot.Library.Web" Assembly="JohnsHope.FPlot.Library" %&gt;
            
            &lt;script runat="server"&gt;
              protected void Page_Load(object sender, EventArgs e) {
                Function1DItem f = new Function1DItem("return sin(x);");
                plot.Model.Add(f);
                plot.Model.FixXtoY = false;
                plot.Model.SetRange(-10, 10, -1.2, 1.2);
              }
            &lt;/script&gt;
            	
            &lt;html&gt;
            &lt;body&gt;
              &lt;form id="form1" runat="server"&gt;
                &lt;fplot:PlotImage ID="plot" runat="server" TempPath="~/temp" Width="300px" Height="200px" EnableZooming="true" /&gt;
              &lt;/form&gt;
            &lt;/body&gt;
            &lt;/html&gt;
            </code>
            
            In order for this WebControl to work, The ASP.NET account (Either ASP.NET or NETWORK SERVICE depending on the
            version of IIS you are using) must have full permissions on the <see cref="P:JohnsHope.FPlot.Library.Web.PlotImage.TempPath">TempPath</see>.
            If you use big data in your plot, it is recommended to turn off ViewState in the WebControl, since otherwise all
            the data of the WebControls Plot is send forth and back between the client browser and the webserver.
            You do this by setting the EnableViewState property of the WebControl to false. You can store the PlotImages Plot in the Session
            object instead.
            You can enable zooming capabilities on the client side by setting EnableZooming to true.
            The zooming does not work and is disabled on the Konqueror Browser.
            </summary>
        </member>
        <member name="E:JohnsHope.FPlot.Library.Web.PlotImage.Zoomed">
            <summary>
            An event that occurs when the PlotImage was zoomed in or out on the client.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Web.PlotImage.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Web.PlotImage.Dispose">
            <summary>
            Removes old (older than 1 hour) files from the TempPath.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Web.PlotImage.EnableViewState">
            <summary>
            If you use big data in your plot, it is recommended to turn off ViewState in the WebControl, since otherwise all
            the data of the WebControls Plot is send forth and back between the client browser and the webserver.
            You do this by setting the EnableViewState property to false.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Web.PlotImage.EnableZooming">
            <summary>
            By setting this property to true you can enable zooming capabilities on the client side. This only works for 2D Plots.
            The zooming does not work and is disabled on the Konqueror Browser. If you disable ViewState and still want to use client zooming
            you must implement zooming by hand. You can do this by calling ((Plot2D)Plot).Zoom(zoomedIn, zoomRect) in the Zoomed event handler.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Web.PlotImage.TempPath">
            <summary>
            The path where temporary files are stored. The ASP.NET Application must have write access to this path.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Web.PlotImage.Plot">
            <summary>
            The <see cref="P:JohnsHope.FPlot.Library.Web.PlotImage.Plot">Plot</see> object to view in the WebControl
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Web.PlotImage.Model">
            <summary>
            Gets or sets the Model of the property Plot. Same as Plot.Model.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Web.PlotImage.Width">
            <summary>
            Sets or gets the Width of the WebControl. Percentage width's are not supported, use pixels instead.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Web.PlotImage.Height">
            <summary>
            Sets or gets the Height of the WebControl. Percentage Height's are not supported, use pixels instead.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Web.PlotImage.Bounds">
            <summary>
            Sets or gets the Width and Height of the image in pixels.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Web.PlotImage.SaveViewState">
            <summary>
            Saves the PlotImages ViewState.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Web.PlotImage.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Loads PostData from a zooming operation
            </summary>
            <param name="key">The name of the first input field</param>
            <param name="form">The form values</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Web.PlotImage.RaisePostBackEvent(System.String)">
            <summary>
            Is called when the PostBackEvent occurs.
            </summary>
            <param name="eventArgument">Is always String.Empty</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Web.PlotImage.RaisePostDataChangedEvent">
            <summary>
            Raises the PostDataChanged event.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Web.PlotImage.OnZoomed(JohnsHope.FPlot.Library.Web.ZoomedEventArgs)">
            <summary>
            Raises the Zoomed event.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Web.PlotImage.OnPreRender(System.EventArgs)">
            <summary>
            Registers the client script if client side zooming is turned on.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Web.PlotImage.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the WebControl.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Properties.Resources.AlreadyFittingError">
            <summary>
              Looks up a localized string similar to Fit.BeginSolve: Another fitting thread is already running..
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Properties.Resources.CovarianceMatrixException">
            <summary>
              Looks up a localized string similar to Covariance Matrix is invalid during fitting.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Properties.Resources.EndSolveException">
            <summary>
              Looks up a localized string similar to Wrong type of IAsyncResult parameter in EndSolve.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Properties.Resources.FitpException">
            <summary>
              Looks up a localized string similar to Cannot change Fitp during calculation..
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Properties.Resources.gammqException">
            <summary>
              Looks up a localized string similar to Invalid arguments in routine gammq.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Properties.Resources.gaussjException0">
            <summary>
              Looks up a localized string similar to Error in gaussj: Singular Matrix-1.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Properties.Resources.gaussjException1">
            <summary>
              Looks up a localized string similar to Error in gaussj: Singular Matrix-2.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Properties.Resources.gcfException">
            <summary>
              Looks up a localized string similar to a too large, ITMAX too small in gcf.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Properties.Resources.gserException0">
            <summary>
              Looks up a localized string similar to x less than 0 in routine gser.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Properties.Resources.gserException1">
            <summary>
              Looks up a localized string similar to a too large, ITMAX too small in routine gser.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.NumberStyle">
            <summary>
            The style with which to display numbers.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.NumberStyle.Normal">
            <summary>
            Uses either fixedpoint or scientific notation depending on the number.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.NumberStyle.Fixedpoint">
            <summary>
            Use always fixedpoint notation.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.NumberStyle.Scientific">
            <summary>
            Use always scientific notation.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Scale">
            <summary>
            A class that describes the properties of the x-,y- and z-scale.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.model">
            <summary>
            The model the Scale belongs to. 
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.r">
            <summary>
            The width of the rasterlines, or 0 if the rasterlines should be computed automatically.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.axis">
            <summary>
            Indicates if the 0-axis should be drawn. Default is false.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.logarithmic">
            <summary>
            Indicates if the scale should be logarithmic. Default is false.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.scale">
            <summary>
            Indicates if the scale numbers are shown. Default is true.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.scaleOutside">
            <summary>
            Indicates if the scale numbers should be on the inside or outside of the plotting area. Default value is true.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.rasterOutside">
            <summary>
            Indicates if the scale raster lines should be drawn inside or outside of the plotting area. Default value is false.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.raster">
            <summary>
            Indicates if raster lines should be drawn. Default is true.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.line">
            <summary>
            Indicates if a scale-line should be drawn. Default is true.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.grid">
            <summary>
            Indicates if grid lines should be drawn. Default is false.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.fix">
            <summary>
            Indicates if the view range of this scale is fixed (no zooming in this direction allowed). Default is false.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.unit">
            <summary>
            The text for the units of this scale.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.unitAngle">
            <summary>
            The angle with which the units are drawn. Default is 0.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.unitAngleRelative">
            <summary>
            Indicates if the unit angle is relative to the scale or absolute. Default is true.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.oppositeLine">
            <summary>
            If true, the scale-line and its opposite side scale will be drawn. Default is true.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.oppositeRaster">
            <summary>
            If true and oppositeScale is true, the opposite side scale will be drawn with a raster. Default is true.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.digits">
            <summary>
            The number of digits used for the scale numbers. Default is 3.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.style">
            <summary>
            The number style used for the scale numbers.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.noBorder">
            <summary>
            If true, no border is drawn
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.Scale.invert">
            <summary>
            If true, the DeviceCoordinates are inverted.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Scale.upper">
            <summary>
            The upper limit of the plotting area on that scale.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Scale.lower">
            <summary>
            The lower limit of the plotting area on that scale.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Scale.#ctor(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            The constructor of the Scale class.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Scale.CopyFrom(JohnsHope.FPlot.Library.Scale)">
            <summary>
            Copies all scale data from the parameter source with a deep copy.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Scale.Clone(JohnsHope.FPlot.Library.PlotModel)">
            <summary>
            Creates a deep copy.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Scale.NumberFormat">
            <summary>
            Returns a format string for use with the ToString method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Scale.UnitToString(System.Double)">
            <summary>
            Returns the value x as a string, using the Scale's number format.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Scale.Raster(System.Boolean)">
            <summary>
            Returns the space between raster lines
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Scale.Log(System.Double)">
            <summary>
            Calculates a logarithmic value between 0 and 1 from a x between lower and upper. 
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Scale.Exp(System.Double)">
            <summary>
            calculates a value between lower and upper from a log between 0 and 1.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Scale.DeviceCoordinate(System.Double,System.Int32)">
            <summary>
            Gets the device coordinate of the point x.
            </summary>
            <param name="x">The point x in world coordinates</param>
            <param name="length">The length of the device plotting area</param>
            <returns>The device coordinate of x</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Scale.WorldCoordinate(System.Int32,System.Int32)">
            <summary>
            Gets the world coordinate of the point X.
            </summary>
            <param name="X">The point X in device coordinates</param>
            <param name="length">The length of the device plotting area</param>
            <returns>The world coordinate of X</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Scale.Draw(System.Drawing.Graphics,System.Drawing.PointF[],System.Boolean,JohnsHope.FPlot.Library.Norms@)">
            <summary>
            Draws a scale. The point-array v is an array of 3 points that denote the orientation of the scale. The primary scale
            is drawn from v[0] -> v[1], the opposite scale is drawn from v[0] + v[2] -> v[1] + v[2]. 
            </summary>
            <param name="g">The Graphics object to Draw to</param>
            <param name="v">The orientation of the scale</param>
            <param name="draw">If false the Scale is not drawn but its extensions are calculated in norms</param>
            <param name="norms">The extensions of the scale</param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.SpecialCursors">
            <summary>
            A class that conatins the enlarge and shrink mouse cursors.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.SpecialCursors.EnlargeCursor">
            <summary>
            A mouse cursor representing an enlarging glass.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.SpecialCursors.ShrinkCursor">
            <summary>
            A mouse cursor representing a shrinking glass.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Text">
            <summary>
            A class that implements reading of numbers from <see cref="T:System.IO.StreamReader"/>s or text <see cref="T:System.IO.Stream"/>s.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Text.Enumerator">
            <summary>
            A class that implements an <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;double&gt;</see> that reads from a <see cref="T:System.IO.StreamReader"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Enumerator.#ctor(System.IO.StreamReader,System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            A constructor that initializes the Enumerator from a <see cref="T:System.IO.StreamReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.StreamReader"/> to read from.</param>
            <param name="separators">A string of separator characters, that separate individual numbers.</param>
            <param name="numberFormat">The number text format.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Enumerator.#ctor(System.IO.StreamReader,System.String)">
            <summary>
            A constructor that initializes the Enumerator from a <see cref="T:System.IO.StreamReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.StreamReader"/> to read from.</param>
            <param name="separators">A string of separator characters, that separate individual numbers.</param>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Text.Enumerator.Current">
            <summary>
            The current value.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Enumerator.Dispose">
            <summary>
            Disposes the Enumerator.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Enumerator.MoveNext">
            <summary>
            Moves to the next value.
            </summary>
            <returns>Returns false if there is no value available.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Enumerator.Reset">
            <summary>
            Throws a <see cref="T:System.NotSupportedException"/>. 
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Text.DataReader">
            <summary>
            A <see cref="T:JohnsHope.FPlot.Library.Text.DataReader"/> class that implements reading numbers from a <see cref="T:System.IO.StreamReader"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.DataReader.#ctor(System.IO.StreamReader,System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            A constructor.
            </summary>
            <param name="reader">The <see cref="T:System.IO.StreamReader"/> to read from.</param>
            <param name="separators">A string of separator characters that separate the individual numbers.</param>
            <param name="numberFormat">A <see cref="T:System.Globalization.NumberFormatInfo"/> describing the number format.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.DataReader.#ctor(System.IO.StreamReader,System.String)">
            <summary>
            A constructor.
            </summary>
            <param name="reader">The <see cref="T:System.IO.StreamReader"/> to read from.</param>
            <param name="separators">A string of separator characters that separate the individual numbers.</param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.Text.Loader">
            <summary>
            A <see cref="T:JohnsHope.FPlot.Library.DataItem.Instance"/> class that implements fast loading of text data. This class is used internally
            by the method <see cref="M:JohnsHope.FPlot.Library.DataItem.LoadText(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Loader.#ctor(System.String)">
            <summary>
            A constructor.
            </summary>
            <param name="separators">A string of characters that separate the numbers</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Loader.#ctor(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            A constructor.
            </summary>
            <param name="separators">A string of characters that separate the numbers</param>
            <param name="numberFormat">The number text format.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Loader.#ctor(System.String,System.Text.Encoding)">
            <summary>
            A constructor.
            </summary>
            <param name="encoding">The text encoding the <see cref="T:System.IO.Stream"/> uses.</param>
            <param name="separators">A string of characters that separate the numbers</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Loader.#ctor(System.String,System.Globalization.NumberFormatInfo,System.Text.Encoding)">
            <summary>
            A constructor.
            </summary>
            <param name="encoding">The text encoding the <see cref="T:System.IO.Stream"/> uses.</param>
            <param name="separators">A string of characters that separate the numbers</param>
            <param name="numberFormat">The number text format.</param>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Text.Loader.Encoding">
            <summary>
            Gets or sets the <see cref="P:JohnsHope.FPlot.Library.Text.Loader.Encoding"/> used by the Loader to decode text <see cref="T:System.IO.Stream"/>s.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.Text.Loader.NumberFormat">
            <summary>
            Gets or sets the <see cref="T:System.Globalization.NumberFormatInfo"/> used by the Loader to parse numbers..
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Loader.CopyFrom(JohnsHope.FPlot.Library.Text.Loader)">
            <summary>
            Copies the Loader from another Loader.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Loader.Load(System.IO.Stream)">
            <summary>
            Loads the <see cref="T:JohnsHope.FPlot.Library.DataItem"/> from a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Loader.Clone">
            <summary>
            Creates a copy of the Loader.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Loader.GetSource">
            <summary>
            Always returns null, because this <see cref="T:JohnsHope.FPlot.Library.Item"/> needs not to be compiled.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Loader.Compile">
            <summary>
            Does nothing and always returns true, because this <see cref="T:JohnsHope.FPlot.Library.Item"/> needs not to be compiled.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Reader(System.IO.StreamReader,System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Returns a DataReader that reads from a <see cref="T:System.IO.StreamReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.StreamReader"/> to read from.</param>
            <param name="separators">A string of characters that separate the numbers</param>
            <param name="numberFormat">The number text format.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Reader(System.IO.StreamReader,System.String)">
            <summary>
            Returns a DataReader that reads from a <see cref="T:System.IO.StreamReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.StreamReader"/> to read from.</param>
            <param name="separators">A string of characters that separate the numbers</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Data(System.IO.StreamReader,System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Reads number data from a <see cref="T:System.IO.StreamReader"/> and returns it in a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.StreamReader"/> to read from.</param>
            <param name="separators">A string of characters that separate the numbers</param>
            <param name="numberFormat">The number text format.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Data(System.IO.StreamReader,System.String)">
            <summary>
            Reads number data from a <see cref="T:System.IO.StreamReader"/> and returns it in a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.StreamReader"/> to read from.</param>
            <param name="separators">A string of characters that separate the numbers</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Data(System.IO.Stream,System.Text.Encoding,System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Reads number data from a text <see cref="T:System.IO.Stream"/> and returns it in a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="encoding">The text encoding the <see cref="T:System.IO.Stream"/> uses.</param>
            <param name="separators">A string of characters that separate the numbers</param>
            <param name="numberFormat">The number text format.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Data(System.IO.Stream,System.Text.Encoding,System.String)">
            <summary>
            Reads number data from a text <see cref="T:System.IO.Stream"/> and returns it in a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="encoding">The text encoding the <see cref="T:System.IO.Stream"/> uses.</param>
            <param name="separators">A string of characters that separate the numbers</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Data(System.IO.Stream,System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Reads number data from a text <see cref="T:System.IO.Stream"/> and returns it in a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="separators">A string of characters that separate the numbers</param>
            <param name="numberFormat">The number text format.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.Data(System.IO.Stream,System.String)">
            <summary>
            Reads number data from a text <see cref="T:System.IO.Stream"/> and returns it in a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="separators">A string of characters that separate the numbers</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.Text.EncodingSource(System.Text.Encoding)">
            <summary>
            Returns a source code string that creates the specified encoding.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.WAV">
            <summary>
            A class that reads data from a WAV file. Only the PCM WAV-format is supported.
            </summary>
        </member>
        <member name="F:JohnsHope.FPlot.Library.WAV.AllChannels">
            <summary>
            If passed as channels parameter, all channels are read.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.WAV.WrongFileFormatException">
            <summary>
            An exception that indicates a file format that does not correspond to the WAV standard.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.WrongFileFormatException.#ctor(System.String)">
            <summary>
            Creates a new WrongFileFormatException with the supplied message string.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.WAV.Enumerator">
            <summary>
            A class that implements a <see cref="T:System.Collections.Generic.IEnumerator`1">IEnumerator&lt;double&gt;</see> that reads from a WAV <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Enumerator.#ctor(System.IO.Stream,System.Int32,System.Double@)">
            <summary>
            Constructor that initializes a WAV.Enumerator on a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="channel">The channel to read, or <see cref="F:JohnsHope.FPlot.Library.WAV.AllChannels"/>.</param>
            <param name="SampleRate">The sample rate of the WAV data in Hertz units.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Enumerator.#ctor(System.IO.Stream,System.Double@)">
            <summary>
            Constructor that initializes a WAV.Enumerator on a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="SampleRate">The sample rate of the WAV data in Hertz units.</param>
        </member>
        <member name="P:JohnsHope.FPlot.Library.WAV.Enumerator.Current">
            <summary>
            The current value.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Enumerator.Dispose">
            <summary>
            Disposes the Enumerator.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Enumerator.MoveNext">
            <summary>
            Moves to the next value.
            </summary>
            <returns>Returns false if there is no value available.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Enumerator.Reset">
            <summary>
            Resets the enumerator to the beginning.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.WAV.DataReader">
            <summary>
            A <see cref="T:JohnsHope.FPlot.Library.WAV.DataReader"/> class that implements reading from a WAV <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.DataReader.#ctor(System.IO.Stream,System.Int32,System.Double@)">
            <summary>
            A constructor that initializes a DataReader on a WAV <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="channel">The channel to read, or <see cref="F:JohnsHope.FPlot.Library.WAV.AllChannels"/>.</param>
            <param name="SampleRate">The sample rate of the WAV data in Hertz units.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.DataReader.#ctor(System.IO.Stream,System.Double@)">
            <summary>
            A constructor that initializes a DataReader on a WAV <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="SampleRate">The sample rate of the WAV data in Hertz units.</param>
        </member>
        <member name="T:JohnsHope.FPlot.Library.WAV.Loader">
            <summary>
            A <see cref="T:JohnsHope.FPlot.Library.DataItem.Instance"/> class that implements fast loading of text data. This class is used internally
            by the method <see cref="M:JohnsHope.FPlot.Library.DataItem.LoadWAV(System.String,JohnsHope.FPlot.Library.DataColumn@)"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Loader.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Loader.#ctor(System.Int32)">
            <summary>
            A constructor.
            </summary>
            <param name="channel">The WAV channel to read or <see cref="F:JohnsHope.FPlot.Library.WAV.AllChannels"/> for all channels.</param>
        </member>
        <member name="P:JohnsHope.FPlot.Library.WAV.Loader.Channel">
            <summary>
            Gets or sets the WAV channel used by the Loader.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.WAV.Loader.SampleRate">
            <summary>
            Gets the sample rate of the WAV data read by the Loader.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Loader.Samples">
            <summary>
            Gets a <see cref="T:JohnsHope.FPlot.Library.WAV.SamplesColumn"/> for the Loader.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Loader.CopyFrom(JohnsHope.FPlot.Library.WAV.Loader)">
            <summary>
            Copies the Loader from another Loader.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Loader.Load(System.IO.Stream)">
            <summary>
            Loads the <see cref="T:JohnsHope.FPlot.Library.DataItem"/> from a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Loader.Clone">
            <summary>
            Creates a copy of the Loader.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Loader.GetSource">
            <summary>
            Always returns null, because this <see cref="T:JohnsHope.FPlot.Library.Item"/> needs not to be compiled.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Loader.Compile">
            <summary>
            Does nothing and always returns true, because this <see cref="T:JohnsHope.FPlot.Library.Item"/> needs not to be compiled.
            </summary>
        </member>
        <member name="T:JohnsHope.FPlot.Library.WAV.SamplesColumn">
            <summary>
            A <see cref="T:JohnsHope.FPlot.Library.DataColumn"/> representing equally spaced sample points, that you can assign to one of the 
            <see cref="T:JohnsHope.FPlot.Library.DataColumn"/>s of a <see cref="T:JohnsHope.FPlot.Library.DataItem"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.SamplesColumn.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.SamplesColumn.#ctor(System.Double)">
            <summary>
            A constructor that initializes a SamplesColumn with a sample rate.
            </summary>
            <param name="sampleRate">The sample rate in Hertz units.</param>
        </member>
        <member name="P:JohnsHope.FPlot.Library.WAV.SamplesColumn.SampleRate">
            <summary>
            Gets or sets the sample rate of the SamplesColumn in Hertz units.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.WAV.SamplesColumn.OriginalSource">
            <summary>
            Returns a source string that corresponds to the <see cref="P:JohnsHope.FPlot.Library.WAV.SamplesColumn.SampleRate"/>.
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.WAV.SamplesColumn.Item(System.Int32)">
            <summary>
            The indexer of the SamplesColumn.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.SamplesColumn.GetSource">
            <summary>
            Returns a compilable source. Used internally be the <see cref="T:JohnsHope.FPlot.Library.Compiler"/>.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.SamplesColumn.CopyFrom(JohnsHope.FPlot.Library.WAV.SamplesColumn)">
            <summary>
            Copies from another SamplesColum. 
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.SamplesColumn.Clone(JohnsHope.FPlot.Library.DataItem)">
            <summary>
            Creates a copy of the SamplesColumn.
            </summary>
            <param name="Parent">The parent <see cref="T:JohnsHope.FPlot.Library.DataItem">DataItem</see> of the copy.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.SamplesColumn.Clone">
            <summary>
            Creates a copy of the SamplesColumn.
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Reader(System.IO.Stream,System.Int32,System.Double@)">
            <summary>
            Returns a <see cref="T:JohnsHope.FPlot.Library.WAV.DataReader"/> that reads data from a WAV <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="channel">The channel to read, or <see cref="F:JohnsHope.FPlot.Library.WAV.AllChannels"/>.</param>
            <param name="SampleRate">The sample rate of the WAV data in Hertz units.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Reader(System.IO.Stream,System.Double@)">
            <summary>
            Returns a <see cref="T:JohnsHope.FPlot.Library.WAV.DataReader"/> that reads data from a WAV <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="SampleRate">The sample rate of the WAV data in Hertz units.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Data(System.IO.Stream,System.Int32,System.Double@)">
            <summary>
            Reads data from a WAV <see cref="T:System.IO.Stream"/> and returns it in a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="channel">The channel to read, or <see cref="F:JohnsHope.FPlot.Library.WAV.AllChannels"/>.</param>
            <param name="SampleRate">The sample rate of the WAV data in Hertz units.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Data(System.IO.Stream,System.Double@)">
            <summary>
            Reads data from a WAV <see cref="T:System.IO.Stream"/> and returns it in a <see cref="T:JohnsHope.FPlot.Library.BigData"/> object.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="SampleRate">The sample rate of the WAV data in Hertz units.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Samples(System.Double)">
            <summary>
            Returns a <see cref="T:JohnsHope.FPlot.Library.WAV.SamplesColumn"/> to represent equally spaced sample points.
            </summary>
            <param name="sampleRate">The sample rate in Hertz units.</param>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Load(System.IO.Stream,System.Int32,System.Double@)">
            <summary>
            Reads data from a WAV (PCM) file stream and returns them as a <see cref="T:JohnsHope.FPlot.Library.BigData">BigData</see> object.
            </summary>
            <param name="stream">The WAV file stream to read from</param>
            <param name="channel">The channel of the WAV data that is read. Only this channel will be read.</param>
            <param name="SampleRate">The sampling rate of the WAV data in Hz.</param>
            <returns>An <c>IList</c> of double values read.</returns>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WAV.Load(System.IO.Stream,System.Double@)">
            <summary>
            Reads data from a WAV (PCM) file stream and returns them as a <see cref="T:JohnsHope.FPlot.Library.BigData">BigData</see> object.
            All channels of the WAV file are read.
            </summary>
            <param name="stream">The WAV file stream to read from</param>
            <param name="SampleRate">The sampling rate of the WAV data in Hz.</param>
            <returns>An <c>IList</c> of double values read.</returns>
        </member>
        <member name="T:JohnsHope.FPlot.Library.WeakReference`1">
            <summary>
            This is a generic <see cref="T:System.WeakReference"/> type
            </summary>
        </member>
        <member name="M:JohnsHope.FPlot.Library.WeakReference`1.#ctor(`0)">
            <summary>
            The constructor of the WeakReference
            </summary>
        </member>
        <member name="P:JohnsHope.FPlot.Library.WeakReference`1.Target">
            <summary>
            The object the WeakReference points to. null if the object doesn't exist anymore.
            </summary>
        </member>
    </members>
</doc>
